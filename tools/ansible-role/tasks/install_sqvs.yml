---

- name: ISECL - SGX QUOTE VERIFICATION SERVICE | Copy SQVS installer binary
  copy:
    src: "{{sqvs_installer_file_src}}"
    dest: "/root/{{sqvs_installer_name}}"
    mode: "u+x"

- name: ISECL - SGX QUOTE VERIFICATION SERVICE | Copy trusted_rootca.pem
  copy:
    src: "{{sqvs_trusted_rootca_file_src}}"
    dest: "/tmp/{{sqvs_trusted_rootca_filename}}"
    mode: "u+x"

- name: ISECL - SGX QUOTE VERIFICATION SERVICE | Copy aas-util_user-role.sh file
  copy:
    src: "{{binaries_path}}/aas-util_user-role.sh"
    dest: "/root/aas-util_user-role.sh"
    mode: "u+x"

- name: ISECL - SGX QUOTE VERIFICATION SERVICE | Copy default_roles.conf file
  template:
    src: "sqvs_users_roles_installation.conf.j2"
    dest: "/root/sqvs_users_roles.conf"
    mode: "u+x"

- name: ISECL - SGX QUOTE VERIFICATION SERVICE | Execute aas-util_user-role.sh
  shell: "./aas-util_user-role.sh -ru -c sqvs_users_roles.conf"
  args:
    chdir: /root
    executable: /bin/bash

- name: ISECL - SGX QUOTE VERIFICATION SERVICE | Create token for SQVS user
  uri:
    url: "https://{{aas}}:{{aas_port}}/aas/token"
    body_format: json
    body:
       {
       "username": "{{sqvs_admin_username}}",
       "password": "{{sqvs_admin_password}}"
       }
    method: POST
    use_proxy: no
    validate_certs: no
    return_content: yes
  register: sqvs_bootstrap_token

- name: ISECL - SGX QUOTE VERIFICATION SERVICE | Generate sqvs.env file
  template:
    src: "sqvs.env.j2"
    dest: "/root/sqvs.env"
    mode: "u+x"

- name: ISECL - SGX QUOTE VERIFICATION SERVICE | Install SGX Quote Verification Service
  shell: "set -o pipefail && ./{{ sqvs_installer_name }} 2>&1 | tee sgx_quote_verification_service-install.log"
  register: sqvs_install_log
  args:
    chdir: /root
    executable: /bin/bash
    creates: /opt/sqvs/bin/sqvs
  notify: start sqvs    

- meta: flush_handlers

- name: ISECL - SGX QUOTE VERIFICATION SERVICE | Verify successful installation of SQVS
  shell: grep 'Installation completed successfully!' /root/sgx_quote_verification_service-install.log
  register: successful_install
  failed_when: "'Installation completed successfully!' not in successful_install.stdout"
