---
- name: ISECL - KEY BROKER SERVICE | Copying aas-util_user-role.sh
  copy:
    src: "{{binaries_path}}/aas-util_user-role.sh"
    dest: "/root/aas-util_user-role.sh"
    mode: "u+x"
  when: setup == 'secure-key-caching' or setup == 'SGX-Orchestration'

- name: ISECL - KEY BROKER SERVICE | Copying default_roles.conf
  template:
    src: "kbs_user_roles.conf.j2"
    dest: "/root/kbs_user_roles.conf"
    mode: "u+x"
  when: setup == 'secure-key-caching' or setup == 'SGX-Orchestration'

- name: ISECL - KEY BROKER SERVICE | Copying aas-util_user-role.sh
  shell: "bash -x aas-util_user-role.sh -ru -c kbs_user_roles.conf"  
  args:
    chdir: /root
    executable: /bin/bash 
  when: setup == 'secure-key-caching' or setup == 'SGX-Orchestration'

- name: ISECL - KEY BROKER SERVICE | Create token for KBS user
  uri:
    url: "https://{{aas}}:{{aas_port}}/aas/token"
    body_format: json
    body:
       {
       "username": "{{kbs_admin_username}}",
       "password": "{{kbs_admin_password}}"
       }
    method: POST
    use_proxy: no
    validate_certs: no
    return_content: yes
  register: setup_admin_token
  when: setup == 'secure-key-caching' or setup == 'SGX-Orchestration'

- name: ISECL - KEY BROKER SERVICE | Generate kbs.env file
  template:
    src: kbs.env.j2
    dest: /root/kbs.env


- name: ISECL - KEY BROKER SERVICE | Copy KBS binary installler
  copy:
    src: "{{ kbs_installer_file_src }}"
    dest: "/root/{{ kbs_installer_file_name }}"
    mode: "u+x"

- name: ISECL - KEY BROKER SERVICE | Install Key Broker Service
  shell: "set -o pipefail && ./{{ kbs_installer_file_name }} 2>&1 | tee key_broker_service-install.log"
  args:
    chdir: /root
    executable: /bin/bash
    creates: /opt/kbs/bin/kbs
  notify: start kbs

- meta: flush_handlers

- name: ISECL - KEY BROKER SERVICE | Verify successful installation of KBS
  shell: grep 'Error' /root/key_broker_service-install.log
  register: successful_install
  failed_when: "'Error' in successful_install.stdout"
