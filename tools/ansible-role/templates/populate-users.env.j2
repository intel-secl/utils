{% if setup == 'trusted-workload-placement-vm' or setup == 'trusted-workload-placement-containers' %}
ISECL_INSTALL_COMPONENTS=AAS,TA,IHUB,HVS
{% elif setup == 'workload-conf-vm' or setup == 'workload-conf-containers-docker' or setup == 'workload-conf-containers-crio' %}
ISECL_INSTALL_COMPONENTS=AAS,KBS,TA,WLS,WPM,WLA,IHUB,HVS
{% elif setup == 'secure-key-caching' and isecl_role == 'csp' %}
ISECL_INSTALL_COMPONENTS=AAS,SCS,SHVS,SGX_AGENT
{% elif setup == 'skc-no-orchestration' and isecl_role == 'csp' %}
ISECL_INSTALL_COMPONENTS=AAS,SCS,SGX_AGENT
{% elif (setup == 'secure-key-caching' or setup == 'sgx-orchestration-kubernetes'  or setup == 'sgx-orchestration-openstack' or setup == 'skc-no-orchestration') and isecl_role == 'enterprise' %}
ISECL_INSTALL_COMPONENTS=AAS,SCS,SQVS,SKBS,SKC-LIBRARY
{% elif (setup == 'sgx-orchestration-kubernetes'  or setup == 'sgx-orchestration-openstack' or setup == 'sgx-attestation-kubernetes' or setup == 'sgx-attestation-openstack') and isecl_role == 'csp' %}
ISECL_INSTALL_COMPONENTS=AAS,SCS,SHVS,SIH,SGX_AGENT
{% elif (setup == 'sgx-attestation-kubernetes' or setup == 'sgx-attestation-openstack') and isecl_role == 'enterprise' %}
ISECL_INSTALL_COMPONENTS=AAS,SCS,SQVS
{% else %}
ISECL_INSTALL_COMPONENTS=AAS,TA,HVS
{% endif %}

AAS_API_URL=https://{{ aas }}:{{ aas_port }}/aas
AAS_ADMIN_USERNAME={{ aas_admin_username }}
AAS_ADMIN_PASSWORD={{ aas_admin_password }}

{% if setup != 'secure-key-caching' and setup != 'sgx-orchestration-kubernetes' and setup != 'sgx-orchestration-openstack' and setup != 'sgx-attestation-kubernetes' and setup != 'sgx-attestation-openstack' and setup != 'skc-no-orchestration' %}
HVS_CERT_SAN_LIST={{ hvs }},{{ hvs_hostname }}
TA_CERT_SAN_LIST=*
HVS_SERVICE_USERNAME={{ hvs_service_username }}
HVS_SERVICE_PASSWORD={{ hvs_service_password }}
{% endif %}

{% if setup == 'trusted-workload-placement-vm' or setup == 'trusted-workload-placement-containers' or setup == 'workload-conf-vm' or setup == 'workload-conf-containers-docker' or setup == 'workload-conf-containers-crio' %}
IH_CERT_SAN_LIST={{ ihub }},{{ ihub_hostname }}
{% endif %}

{% if setup == 'workload-conf-vm' or setup == 'workload-conf-containers-docker' or setup == 'workload-conf-containers-crio' %}
WLS_CERT_SAN_LIST={{ wls }},{{ wls_hostname }}
KBS_CERT_SAN_LIST={{ kbs }},{{ kbs_hostname }}
{% endif %}

{% if setup == 'secure-key-caching' and isecl_role == 'csp' %}
SCS_CERT_SAN_LIST={{ scs }},{{ scs_hostname }}
SHVS_CERT_SAN_LIST={{ shvs }},{{ shvs_hostname }}
SGX_AGENT_CERT_SAN_LIST={{ sgx_agent }},{{ sgx_agent_hostname }}

SCS_SERVICE_USERNAME={{ scs_admin_username }}
SCS_SERVICE_PASSWORD={{ scs_admin_password }}

SHVS_SERVICE_USERNAME={{ shvs_admin_username }}
SHVS_SERVICE_PASSWORD={{ shvs_admin_password }}

SGX_AGENT_USERNAME={{ sgxagent_admin_username }}
SGX_AGENT_PASSWORD={{ sgxagent_admin_password }}
{% endif %}

{% if setup == 'skc-no-orchestration' and isecl_role == 'csp' %}
SCS_CERT_SAN_LIST={{ scs }},{{ scs_hostname }}
SGX_AGENT_CERT_SAN_LIST={{ sgx_agent }},{{ sgx_agent_hostname }}

SCS_SERVICE_USERNAME={{ scs_admin_username }}
SCS_SERVICE_PASSWORD={{ scs_admin_password }}

SGX_AGENT_USERNAME={{ sgxagent_admin_username }}
SGX_AGENT_PASSWORD={{ sgxagent_admin_password }}
{% endif %}


{% if (setup == 'secure-key-caching' or setup == 'sgx-orchestration-kubernetes'  or setup == 'sgx-orchestration-openstack' or setup == 'skc-no-orchestration') and isecl_role == 'enterprise' %}
SCS_CERT_SAN_LIST={{ scs }},{{ scs_hostname }}
SQVS_CERT_SAN_LIST={{ sqvs }},{{ sqvs_hostname }}
KBS_CERT_SAN_LIST={{ kbs }},{{ kbs_hostname }}

SCS_SERVICE_USERNAME={{ scs_admin_username }}
SCS_SERVICE_PASSWORD={{ scs_admin_password }}

KBS_SERVICE_USERNAME={{ kbs_admin_username }}
KBS_SERVICE_PASSWORD={{ kbs_admin_password }}

SKC_LIBRARY_USERNAME={{ skclib_admin_username }}
SKC_LIBRARY_PASSWORD={{ skclib_admin_password }}

SKC_LIBRARY_CERT_COMMON_NAME={{ skclib_admin_username }}

SKC_LIBRARY_KEY_TRANSFER_CONTEXT={{ skclib_key_transfer_context }}
{% endif %}

{% if (setup == 'sgx-orchestration-kubernetes'  or setup == 'sgx-orchestration-openstack' or setup == 'sgx-attestation-kubernetes' or setup == 'sgx-attestation-openstack') and isecl_role == 'csp' %}
SCS_CERT_SAN_LIST={{ scs }},{{ scs_hostname }}
SHVS_CERT_SAN_LIST={{ shvs }},{{ shvs_hostname }}
IH_CERT_SAN_LIST={{ ihub }},{{ ihub_hostname }}
SGX_AGENT_CERT_SAN_LIST={{ sgx_agent }},{{ sgx_agent_hostname }}

SCS_SERVICE_USERNAME={{ scs_admin_username }}
SCS_SERVICE_PASSWORD={{ scs_admin_password }}

SHVS_SERVICE_USERNAME={{ shvs_admin_username }}
SHVS_SERVICE_PASSWORD={{ shvs_admin_password }}

SGX_AGENT_USERNAME={{ sgxagent_admin_username }}
SGX_AGENT_PASSWORD={{ sgxagent_admin_password }}

IHUB_SERVICE_USERNAME={{ ihub_service_username }}
IHUB_SERVICE_PASSWORD={{ ihub_service_password }}
{% endif %}

{% if ( setup == 'sgx-attestation-kubernetes' or setup == 'sgx-attestation-openstack') and isecl_role == 'enterprise' %}
SCS_CERT_SAN_LIST={{ scs }},{{ scs_hostname }}
SQVS_CERT_SAN_LIST={{ sqvs }},{{ sqvs_hostname }}

SCS_SERVICE_USERNAME={{ scs_admin_username }}
SCS_SERVICE_PASSWORD={{ scs_admin_password }}

{% endif %}

{% if setup == 'workload-conf-vm' or setup == 'workload-conf-containers-docker' or setup == 'workload-conf-containers-crio' %}
IHUB_SERVICE_USERNAME={{ ihub_service_username }}
IHUB_SERVICE_PASSWORD={{ ihub_service_password }}
{% endif %}

{% if setup == 'workload-conf-vm' or setup == 'workload-conf-containers-docker' or setup == 'workload-conf-containers-crio' %}
WPM_SERVICE_USERNAME={{ wpm_admin_username }}
WPM_SERVICE_PASSWORD={{ wpm_admin_password }}

WLS_SERVICE_USERNAME={{ wls_service_username }}
WLS_SERVICE_PASSWORD={{ wls_service_password }}

WLA_SERVICE_USERNAME={{ wla_service_username }}
WLA_SERVICE_PASSWORD={{ wla_service_password }}
{% endif %}

{% if setup != 'secure-key-caching' and setup != 'sgx-orchestration-kubernetes' and setup != 'sgx-orchestration-openstack' and setup != 'sgx-attestation-kubernetes' and setup != 'sgx-attestation-openstack' and setup != 'skc-no-orchestration' %}
GLOBAL_ADMIN_USERNAME={{ global_admin_username }}
GLOBAL_ADMIN_PASSWORD={{ global_admin_password }}
{% endif %}

INSTALL_ADMIN_USERNAME={{ install_admin_username }}
INSTALL_ADMIN_PASSWORD={{ install_admin_password }}
