{
	"info": {
		"_postman_id": "bfb4c161-7403-4e51-850a-826b5a42fee2",
		"name": "Secure Key Caching",
		"description": "Key Protection is implemented by the SKC Client -- a set of libraries - which must be linked with a\ntenant workload, like Nginx, deployed in a CSP environment and the Key Broker Service (KBS)\ndeployed in the tenant's enterprise environment. The SKC Client retrieves the keys needed by the\nworkload from KBS after proving that the key can be protected in an SGX enclave.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "createKmsToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e634af5e-053e-4757-96e2-ed3313df4092",
								"exec": [
									"pm.environment.set(\"bearerTokenKms\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/jwt",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{kmsUser}}\",\r\n    \"password\": \"{{kmsPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{aas}}:{{aasPort}}/aas/token",
							"protocol": "https",
							"host": [
								"{{aas}}"
							],
							"port": "{{aasPort}}",
							"path": [
								"aas",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is not required when requesting token for Authservice admin user. Authservice admin user bearer token should be provided in Authorization header when requesting bearer token for other users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/jwt",
										"type": "text"
									},
									{
										"key": "Content-Transfer-Encoding",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{kmsUser}}\",\r\n    \"password\": \"{{kmsPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aas}}:{{aasPort}}/aas/token",
									"protocol": "https",
									"host": [
										"{{aas}}"
									],
									"port": "{{aasPort}}",
									"path": [
										"aas",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Wed, 09 Sep 2020 13:14:33 GMT"
								},
								{
									"key": "Content-Length",
									"value": "843"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6ImExMGFkYzJmNjA0OTg3NTRlYzExZjExNGQ0MDE3ZDI5ZDBjZmFiOWUiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IktNUyIsIm5hbWUiOiJLZXlDUlVEIn1dLCJwZXJtaXNzaW9ucyI6W3sic2VydmljZSI6IktNUyIsInJ1bGVzIjpbIio6KjoqIl19XSwiZXhwIjoxNTk5ODMwMDczLCJpYXQiOjE1OTk2NTcyNDMsImlzcyI6IkFBUyBKV1QgSXNzdWVyIiwic3ViIjoiRVR1c2VyIn0.hNOT_2JXJ0x9xx9XUULLYtDQLFn_Z8FeyXC85_EJ5Ha5Z0yTSz_noD_c_EHE-RZYzYcncCa_0JKboQb7YuU7tO4zQEF4OsxQkHkaIvgNoxChRskY4UDSfQgJImM9YGFWF3iLAavlJPJ0K7IorCFSYajABi1try4XND0tDDo7ah8GPszLtFwpKLCb9-_C6r-_JlbNUGYy_P9gq4IgPaC7lisr46id-sCBgNd-a8Z6Pf55mcPcJVqWIay7EWirSF9qo3cZLtUJ_aHs-38z1qZXJpJklD7AVhPR-MQdwiyturDe57wUC5-XrF2UKiZ4sWSe3YNcVKrwTNiXk0FC2WC5mNOoFV7Rr294zLyrXeF_xThtViqdReT5C7SWuAvng37y52nPUL1S4tBbsH7zqYl1o8hityZAlaYVGb_0dw1eklUXkYfW-KzKcfJRt2PJ9fVE-bkBFkWPyoJv10Gt7eiufxIlJBM8bo1itPaxboOUH4BCZfXlkwICOx5T0W6CbtYo"
						}
					]
				},
				{
					"name": "createSqvsToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "757167ec-b680-41f3-a1d4-414acd8083e0",
								"exec": [
									"pm.environment.set(\"bearerTokenSqvs\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{sqvsUser}}\",\r\n    \"password\": \"{{sqvsPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{aas}}:{{aasPort}}/aas/token",
							"protocol": "https",
							"host": [
								"{{aas}}"
							],
							"port": "{{aasPort}}",
							"path": [
								"aas",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is not required when requesting token for Authservice admin user. Authservice admin user bearer token should be provided in Authorization header when requesting bearer token for other users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{sqvsUser}}\",\r\n    \"password\": \"{{sqvsPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aas}}:{{aasPort}}/aas/token",
									"protocol": "https",
									"host": [
										"{{aas}}"
									],
									"port": "{{aasPort}}",
									"path": [
										"aas",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Thu, 17 Sep 2020 11:12:41 GMT"
								},
								{
									"key": "Content-Length",
									"value": "934"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6Ijc0ZGY4M2U1ZWQ1Yjc0NmVhMzUyYzU5NWY4MmIzNjUyOTAxYjg3NzgiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IkNNUyIsIm5hbWUiOiJDZXJ0QXBwcm92ZXIiLCJjb250ZXh0IjoiQ049U1FWUyBUTFMgQ2VydGlmaWNhdGU7U0FOPTEwLjgwLjIwNy4xNTtDRVJUVFlQRT1UTFMifSx7InNlcnZpY2UiOiJTUVZTIiwibmFtZSI6IlF1b3RlVmVyaWZpZXIifV0sImV4cCI6MTYwMDUxMzk2MSwiaWF0IjoxNjAwMzQxMTMxLCJpc3MiOiJBQVMgSldUIElzc3VlciIsInN1YiI6InNxdnN1c2VyQHNxdnMifQ.Z_-iSxnYTcqwhIsQLt5kBPfNVKHNbrO2kwl_TV4g2SS80cCYWu8ZRkRxq6cdQVdugkn9AIaI_GJfFCkBugCEmBDWWJ3jk2kWwIgqbr6txKCk_3G_Z0dBdF2hogAiToJrOqejvKKscKGCP2xzBSN6MQ7lPYRykZc2_oEDnqoIpoI5w7P2fd1OhWC-nxrtgXBwcOKPJplktETHm7SI7lDsWJXRx5gaakA4VH6wMr5Qd1-FzOCPa7w3iDAhjih0M_McV7Uj-llI0NcmRNVJvWvkomYB5_NHVPM-l6XOJKeILRqCbkbg3Mgml87G7dhMMqbXTF7TiIKD4dfneLAmcg7ENHYXPnsJXENIHAjaycBthDrAHb7wrCf3llISfON9JKNFmT51Afa3NLMOPTH1p38SxIJbB_Idp33OEOUIJmeUlWXJNO9Owp9eivbBrDhuzuoNVMEdTEpRb8TE1uqWkUgWDpwyw69U7OLykG_vD2zt6KqEcOhYUr2iA5Se3Jdp5M17"
						}
					]
				}
			],
			"description": "To make an API request to an Intel® SecL-DC service, an authentication\r\ntoken is now required. API requests must now include an Authorization\r\nheader with an appropriate token:\r\n\r\n```\r\nAuthorization: Bearer <token>\r\n```\r\n\r\nThe token is issued by the AAS and will expire after a set amount of time.\r\nThis token may be used with any Intel® SecL-DC service, and will carry the\r\nappropriate permissions for the role(s) assigned to the account the token was\r\ngenerated for.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ab4a018a-f7ff-4197-9d85-9496af36dfde",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fd8bfa0c-0872-47cf-a32f-0406a16e409a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Verify Services",
			"item": [],
			"description": "The command-line option can be used to confirm that all services are up and running before proceeding to the actual use case demonstration.\n\nVerify KMS:\n\n```\nkms status\n```\n\nVerify SQVS:\n\n```\nsqvs status\n```\n\nVerify SCS:\n\n```\nscs status\n```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0dd54522-264b-4dd5-9555-5832a8041af1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2b0d29b0-9471-4b99-9966-45607f1b6457",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create a Asymmetric (RSA) Key",
			"item": [
				{
					"name": "keyTransferPolicy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{bearerTokenKms}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sgx_enclave_issuer_anyof\": [\r\n        \"cd171c56941c6ce49690b455f691d9c8a04c2e43e0a4d30f752fa5285c7ee57f\"\r\n    ],\r\n    \"sgx_enclave_issuer_product_id_anyof\": [\r\n        0\r\n    ],\r\n    \"sgx_enclave_issuer_extended_product_id_anyof\": [\r\n        \"00000000000000000000000000000000\"\r\n    ],\r\n    \"sgx_enclave_measurement_anyof\": [\r\n        \"9874cdc64dcd9a9b07389c6c5f4f225b8582596b7c182f2d43f34bd0d81bd8ad\"\r\n    ],\r\n    \"sgx_config_id_svn\": 0,\r\n    \"sgx_enclave_svn_minimum\": 1,\r\n    \"sgx_config_id_anyof\": [\r\n        \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\r\n    ],\r\n    \"tls_client_certificate_issuer_cn_anyof\": [\r\n        \"CMSCA\",\r\n        \"CMS TLS Client CA\"\r\n    ],\r\n    \"client_permissions_allof\": [\r\n        \"nginx\",\r\n        \"USA\"\r\n    ],\r\n    \"attestation_type_anyof\": [\r\n        \"SGX\"\r\n    ],\r\n    \"sgx_enforce_tcb_up_to_date\": false\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "https://{{kms}}:{{kmsPort}}/v1/key-transfer-policies",
							"protocol": "https",
							"host": [
								"{{kms}}"
							],
							"port": "{{kmsPort}}",
							"path": [
								"v1",
								"key-transfer-policies"
							]
						},
						"description": "Creates a new Key Transfer Policy. Key Transfer Policy is defined by the enterprise administrator for application by Key Server during APK transfer to validate before release. A valid bearer token is required to authorize this REST call.\r\n\r\nExecute the below command in the host machine to get the SGX_MEASUREMENT value.\r\n\r\n```\r\n/tmp/sgx/crypto-api-toolkit/src/test/p11test AsymWrapUnwrapTests \r\n```"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenKms}}",
										"type": "text",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sgx_enclave_issuer_anyof\": [\r\n        \"cd171c56941c6ce49690b455f691d9c8a04c2e43e0a4d30f752fa5285c7ee57f\"\r\n    ],\r\n    \"sgx_enclave_issuer_product_id_anyof\": [\r\n        0\r\n    ],\r\n    \"sgx_enclave_issuer_extended_product_id_anyof\": [\r\n        \"00000000000000000000000000000000\"\r\n    ],\r\n    \"sgx_enclave_measurement_anyof\": [\r\n        \"9874cdc64dcd9a9b07389c6c5f4f225b8582596b7c182f2d43f34bd0d81bd8ad\"\r\n    ],\r\n    \"sgx_config_id_svn\": 0,\r\n    \"sgx_enclave_svn_minimum\": 1,\r\n    \"sgx_config_id_anyof\": [\r\n        \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\r\n    ],\r\n    \"tls_client_certificate_issuer_cn_anyof\": [\r\n        \"CMSCA\",\r\n        \"CMS TLS Client CA\"\r\n    ],\r\n    \"client_permissions_allof\": [\r\n        \"nginx\",\r\n        \"USA\"\r\n    ],\r\n    \"attestation_type_anyof\": [\r\n        \"SGX\"\r\n    ],\r\n    \"sgx_enforce_tcb_up_to_date\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{kms}}:{{kmsPort}}/v1/key-transfer-policies",
									"protocol": "https",
									"host": [
										"{{kms}}"
									],
									"port": "{{kmsPort}}",
									"path": [
										"v1",
										"key-transfer-policies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 09 Sep 2020 13:15:03 GMT"
								},
								{
									"key": "Set-Cookie",
									"value": "JSESSIONID=node0nbpvrbx5mip2bv3ad2f4mi0y93.node0; Path=/; Secure"
								},
								{
									"key": "Set-Cookie",
									"value": "rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Tue, 08-Sep-2020 13:15:03 GMT"
								},
								{
									"key": "Expires",
									"value": "Thu, 01 Jan 1970 00:00:00 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 10.219.138.63; form-action 10.219.138.63; frame-ancestors 10.219.138.63; plugin-types application/pdf"
								},
								{
									"key": "Content-Length",
									"value": "834"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"operation\": \"create key transfer policy\",\n    \"created\": [\n        {\n            \"created_at\": \"2020-09-09T06:15:03-0700\",\n            \"id\": \"{{keyTransferPolicyId}}\",\n            \"sgx_enclave_issuer_anyof\": [\n                \"cd171c56941c6ce49690b455f691d9c8a04c2e43e0a4d30f752fa5285c7ee57f\"\n            ],\n            \"sgx_enclave_issuer_product_id_anyof\": [\n                0\n            ],\n            \"sgx_enclave_issuer_extended_product_id_anyof\": [\n                \"00000000000000000000000000000000\"\n            ],\n            \"sgx_enclave_measurement_anyof\": [\n                \"9874cdc64dcd9a9b07389c6c5f4f225b8582596b7c182f2d43f34bd0d81bd8ad\"\n            ],\n            \"sgx_enclave_svn_minimum\": 1,\n            \"sgx_config_id_anyof\": [\n                \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n            ],\n            \"sgx_config_id_svn\": 0,\n            \"tls_client_certificate_issuer_cn_anyof\": [\n                \"CMSCA\",\n                \"CMS TLS Client CA\"\n            ],\n            \"client_permissions_allof\": [\n                \"nginx\",\n                \"USA\"\n            ],\n            \"attestation_type_anyof\": [\n                \"SGX\"\n            ]\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "keyUsagePolicy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenKms}}",
								"type": "text",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"not_after\": \"2021-08-17T22:24:20-08:00\",\r\n    \"not_before\": \"2020-08-17T22:24:20-08:00\",\r\n    \"lease_time_limit\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{kms}}:{{kmsPort}}/v1/key-usage-policies",
							"protocol": "https",
							"host": [
								"{{kms}}"
							],
							"port": "{{kmsPort}}",
							"path": [
								"v1",
								"key-usage-policies"
							]
						},
						"description": "Creates a new Key Usage Policy. Key Usage Policy is defined by the enterprise administrator for application by Key Agent to validate before release during crypto operations at workload VM. A valid bearer token is required to authorize this REST call."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenKms}}",
										"type": "text",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"not_after\": \"2021-08-17T22:24:20-08:00\",\r\n    \"not_before\": \"2020-08-17T22:24:20-08:00\",\r\n    \"lease_time_limit\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{kms}}:{{kmsPort}}/v1/key-usage-policies",
									"protocol": "https",
									"host": [
										"{{kms}}"
									],
									"port": "{{kmsPort}}",
									"path": [
										"v1",
										"key-usage-policies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 09 Sep 2020 13:16:57 GMT"
								},
								{
									"key": "Set-Cookie",
									"value": "JSESSIONID=node0z9uy2a2c5jbj1736l3ysvz1vn104.node0; Path=/; Secure"
								},
								{
									"key": "Set-Cookie",
									"value": "rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Tue, 08-Sep-2020 13:16:57 GMT"
								},
								{
									"key": "Expires",
									"value": "Thu, 01 Jan 1970 00:00:00 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 10.219.138.63; form-action 10.219.138.63; frame-ancestors 10.219.138.63; plugin-types application/pdf"
								},
								{
									"key": "Content-Length",
									"value": "258"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"operation\": \"create key usage policy\",\n    \"created\": [\n        {\n            \"not_after\": \"2021-08-17T22:24:20-08:00\",\n            \"not_before\": \"2020-08-17T22:24:20-08:00\",\n            \"lease_time_limit\": 1,\n            \"created_at\": \"2020-09-09T06:16:57-0700\",\n            \"id\": \"{{keyUsagePolicyId}}\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "createKey",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenKms}}",
								"type": "text",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"descriptor_uri\": \"urn:intel:dhsm2:crypto-schema:storage\",\r\n    \"algorithm\": \"RSA\",\r\n    \"transfer_policy\": \"{{keyTransferPolicyId}}\",\r\n    \"usage_policy\": \"{{keyUsagePolicyId}}\",\r\n    \"private_key\": \"{{privateKey}}\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "https://{{kms}}:{{kmsPort}}/v1/keys",
							"protocol": "https",
							"host": [
								"{{kms}}"
							],
							"port": "{{kmsPort}}",
							"path": [
								"v1",
								"keys"
							]
						},
						"description": "Creates a new Application Key based on the provided Key Algorithm, Key Transfer Policy and Key Usage Policy details in the request body. Decision to switch to appropriate plugin for different applications is based on descriptor_uri. The generated secret key is encoded in JSON format and stored in a file (keyId as filename) on the disk. A valid bearer token is required to authorize this REST call."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenKms}}",
										"type": "text",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"descriptor_uri\": \"urn:intel:dhsm2:crypto-schema:storage\",\r\n    \"algorithm\": \"RSA\",\r\n    \"transfer_policy\": \"{{keyTransferPolicyId}}\",\r\n    \"usage_policy\": \"{{keyUsagePolicyId}}\",\r\n    \"private_key\": \"{{privateKey}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{kms}}:{{kmsPort}}/v1/keys",
									"protocol": "https",
									"host": [
										"{{kms}}"
									],
									"port": "{{kmsPort}}",
									"path": [
										"v1",
										"keys"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 09 Sep 2020 17:53:55 GMT"
								},
								{
									"key": "Set-Cookie",
									"value": "JSESSIONID=node0g2xvwllcvu761i7i23mziijjs172.node0; Path=/; Secure"
								},
								{
									"key": "Set-Cookie",
									"value": "rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Tue, 08-Sep-2020 17:53:55 GMT"
								},
								{
									"key": "Expires",
									"value": "Thu, 01 Jan 1970 00:00:00 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 10.219.138.63; form-action 10.219.138.63; frame-ancestors 10.219.138.63; plugin-types application/pdf"
								},
								{
									"key": "Content-Length",
									"value": "852"
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {\n        \"operation\": \"register key\",\n        \"status\": \"success\"\n    },\n    \"id\": \"<keyId>\",\n    \"created_date\": \"2020-09-09T10:53:55-07:00\",\n    \"descriptor_uri\": \"urn:intel:dhsm2:crypto-schema:storage\",\n    \"algorithm\": \"RSA\",\n    \"key_length\": 2048,\n    \"transfer_policy\": \"{{keyTransferPolicyId}}\",\n    \"usage_policy\": \"{{keyUsagePolicyId}}\",\n    \"transfer_link\": \"https://<kms>:<kmsPort>/v1/keys/<keyId>/transfer\",\n    \"public_key\": \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn3dyvJrOS/c5d1+nYJOZpSnWNCXTA0aXczWgfLCHRnbUxS6OEfepgyVOtl/ofFFhly0AJJAwXu5ITWvxTbXkPDo9bPjVtH1K3ku2WsG9NgEtkcS+0cG7n3JA0j+cGLVJ+gZsRML74Z+S9InUHXyt0Tms8Pzep4JYybn0iAVaJFCMR5dPIpep7xKACo9Znq5TtdeI+rmRsWAyBaH/PKVN4auQ2FK7HYFG/L3BpzvAgjbCNRiHnZt+XMRRJvFjlFomIMyz++MMTLuk4NhCfwC+3+2p6Mse/IZZYIAUkqTBG2tUHeGME6orRcokp6Yo7tOrTqO722KiA1ciyGZHC2hTlwIDAQAB\"\n}"
						}
					]
				}
			],
			"description": "To create a asymmetric (RSA) key, execute the \"run.sh\" script present in /root/workspace/utils/build/skc-tools/kbs_script/. KMS_IP and AAS_IP should be configured in this script manually.\n\nUpdate transfer_policy_request.json with modified sgx_* values in the file with corresponding values obtained by running the below command on the host machine.\n\n```\n/tmp/sgx/crypto-api-toolkit/src/test/p11test AsymWrapUnwrapTests \n```\n\n```\n./run.sh reg\n```\n\nThe \"run.sh\" script will create the Key Transfer Policy, Key Usage Policy, and Asymmetric (RSA) Key by calling the following Key Broker Service (KBS) REST endpoints.\n\nThen we have to copy the created certificate to the SGX Compute Node /root directory.\n\n```\ncp output/server.cert output/<keyId>.crt\n```\n\n```\nscp output/<keyId>.crt root@<SGX Compute Node>:/root/\n```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c3ab0c8f-b067-46a5-a588-cb5c15b8b728",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6c1081c7-2192-482d-904e-147b972594ab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Configure Ngnix on SGX Compute Node",
			"item": [],
			"description": "We should configure Ngnix on SGX Compute Node by following the below steps:\n\n1. Copy /root/workspace/skc_library/container/resources/openssl.cnf to /etc/pki/tls/ path. \n2. Copy /root/workspace/skc_library/container/resources/nginx.conf to /etc/nginx/ path. \n3. Update the SSL certificate path and Key ID in the \"nginx.conf\".\n4. Add a new attribute \"preload_keys\" with its value \"keys.txt\" file path in \n   the core section of the /opt/skc/etc/pkcs11-apimodule.ini file.\n5. Create or edit the \"keys.txt\" file with the Key ID and object as per the \n   Nginx configuration file.\n\nNOTE: Check the hostname in the /etc/hosts file.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7ef9a6b5-851a-4f4a-8191-5e36743b47a3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b0689029-4178-4fe7-b5f5-5717e20404eb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Establish Session and Transfer Key",
			"item": [
				{
					"name": "verifyQuote",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenSqvs}}",
								"type": "text",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quote\": \"<string>\"\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "https://{{sqvs}}:{{sqvsPort}}/svs/v1/verifyQuote",
							"protocol": "https",
							"host": [
								"{{sqvs}}"
							],
							"port": "{{sqvsPort}}",
							"path": [
								"svs",
								"v1",
								"verifyQuote"
							]
						},
						"description": "Verifies the quote provided in the request body by checking whether the quote is ECDSA or software quote (for testing purpose) and performs the set of validation steps if the quote is ECDSA. Quote verifier requests SGX Quote Verification Service (SQVS) to verify a quote. SQVS parses the quote, verifies all the parameters in the quote and returns the response."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenSqvs}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"quote\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{sqvs}}:{{sqvsPort}}/svs/v1/verifyQuote",
									"protocol": "https",
									"host": [
										"{{sqvs}}"
									],
									"port": "{{sqvsPort}}",
									"path": [
										"svs",
										"v1",
										"verifyQuote"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 09 Sep 2020 18:00:59 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1037"
								}
							],
							"cookie": [],
							"body": "{\n    \"Status\": \"Success\",\n    \"Message\": \"SGX ECDSA Quote Verification Successful\",\n    \"ChallengeKeyType\": \"RSA\",\n    \"ChallengeRsaPublicKey\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtlLCWbh0Nd/KPbPVXlbR\\nY47bTv4gHzZZTvDwjSU7iS61+sDSpS106UYnzPIyBtmxVlUV/h6L7F0EEXn4YhHw\\n1/B1zZTlE0HvTCb1H7LYGaEbmVcnKMr6Y92f+q+gyomazAOJ9YQefK7uyciYuIIb\\nW9Kz6yGGJr9T5S7/zNqk8iC20NYXirD8xo2MQvviUSLhwYN4dBhroou/0cB3k/4d\\nhi8FkCFQpBCQlECnFl6238xUfeskByc7xWZhvj67N4M3yvObFxUp5Sv61yHxfB6I\\n50OXbqsYHPJRc2eqEJWUkOJEKbVqPid5f+kZpwwDmDs8cS95CpgQShFJG+rbL0cX\\nwwIDAQAB\\n-----END PUBLIC KEY-----\\n\",\n    \"EnclaveIssuer\": \"cd171c56941c6ce49690b455f691d9c8a04c2e43e0a4d30f752fa5285c7ee57f\",\n    \"EnclaveIssuerProdID\": \"00\",\n    \"EnclaveIssuerExtProdID\": \"00000000000000000000000000000000\",\n    \"EnclaveMeasurement\": \"01c60b9617b2f96e53cb75ef01e0dccea3afc7b7992697eabb8f714b2ccd1953\",\n    \"ConfigSvn\": \"00\",\n    \"IsvSvn\": \"01\",\n    \"ConfigId\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"TcbLevel\": \"UpToDate\"\n}"
						}
					]
				}
			],
			"description": "1. Nginx will initiate a Key Transfer with the new Key id by calling Key Broker Service (KBS) REST endpoint (GET /v1/keys/:keyId/dhsm2-transfer) and will get a 401 HTTP response from KBS since the session is not established. \n2. Nginx will create a new session key by calling the KBS REST endpoint (POST /v1/session).\n3. SKC Client will send the SGX Quote to KBS, then KBS will verify the quote by calling SGX Quote Verification Service(SQVS) REST endpoint (POST /v1/verifyQuote).\n4. SQVS checks whether the quote signature and PCK Certificate are valid checks other parameters in the quote and returns the verification result. SQVS contacts SGX Caching service (SCS) to make sure that PCKCRL, TCBInfo, and QEIdentity in the quote are correct. \n5. Once the session is successfully established, Again Nginx will initiate a Key Transfer with the key id by calling KBS REST endpoint (GET /v1/keys/:keyId/dhsm2-transfer) and will get the response as key transfer successful.\n \nRemove the tokens if already present.\n\n```\nrm -rf /opt/intel/cryptoapitoolkit/tokens/*\n```\n\nTo restart the Nginx, use the below commands.\n\n```\npkill nginx\n```\n\n```\nnginx \n```\n\n```\nwget -k -v https://localhost:2443 --no-check-certificate\n```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5af8ff9c-4fb6-45c5-9e20-0ef500f56abb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1f60e991-5496-4d90-a7ac-e229d5469a38",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8bba635d-0709-46f4-bc3c-9144e25849d0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fc958721-02b5-4b95-9a1a-74d6a367d570",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}