{
	"info": {
		"_postman_id": "0be3acb4-38ed-448c-91f4-c42e26116a6e",
		"name": "Data Fencing with Asset Tags(VMWare)",
		"description": "Data Fencing with Asset Tags builds on the Host Attestation use case to allow physical\r\nTPMs to be written with Asset Tags containing any number of key/value pairs.\r\nThis use case is typically used to identify the geographic location of the\r\nphysical server, but can also be used to identify other attributes. For example,\r\nthe Asset Tags provided by the Data Sovereignty use case could be used to\r\nidentify hosts that meet specific compliance requirements and can run\r\ncontrolled workloads.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "createToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerToken\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/jwt",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{globalAdminUser}}\",\n    \"password\": \"{{globalAdminPass}}\"\n}"
						},
						"url": {
							"raw": "https://{{aas}}:{{aasPort}}/aas/v1/token",
							"protocol": "https",
							"host": [
								"{{aas}}"
							],
							"port": "{{aasPort}}",
							"path": [
								"aas",
								"v1",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API \nrequests. Bearer token Authorization is not required when requesting token for Authservice \nadmin user. Authservice admin user bearer token should be provided in Authorization header \nwhen requesting bearer token for other users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{globalAdminUser}}\",\n    \"password\": \"{{globalAdminPass}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aas}}:{{aasPort}}/aas/token",
									"protocol": "https",
									"host": [
										"{{aas}}"
									],
									"port": "{{aasPort}}",
									"path": [
										"aas",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Thu, 13 Aug 2020 13:12:45 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1366"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjljMzU4ZGY0YmIyYTE5NGRkN2IyMGM0Mjg1M2Y3MTEwODQ5ZDNlM2YiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IkFBUyIsIm5hbWUiOiJBZG1pbmlzdHJhdG9yIn0seyJzZXJ2aWNlIjoiVEEiLCJuYW1lIjoiQWRtaW5pc3RyYXRvciJ9LHsic2VydmljZSI6IkhWUyIsIm5hbWUiOiJBZG1pbmlzdHJhdG9yIn0seyJzZXJ2aWNlIjoiQUgiLCJuYW1lIjoiQWRtaW5pc3RyYXRvciJ9LHsic2VydmljZSI6IktNUyIsIm5hbWUiOiJLZXlDUlVEIn0seyJzZXJ2aWNlIjoiV0xTIiwibmFtZSI6IkFkbWluaXN0cmF0b3IifV0sInBlcm1pc3Npb25zIjpbeyJzZXJ2aWNlIjoiQUFTIiwicnVsZXMiOlsiKjoqOioiXX0seyJzZXJ2aWNlIjoiQUgiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJIVlMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJLTVMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJUQSIsInJ1bGVzIjpbIio6KjoqIl19LHsic2VydmljZSI6IldMUyIsInJ1bGVzIjpbIio6KjoqIl19XSwiZXhwIjoxNTk3NDk3MTY1LCJpYXQiOjE1OTczMjQzMzUsImlzcyI6IkFBUyBKV1QgSXNzdWVyIiwic3ViIjoiZ2xvYmFsX2FkbWluX3VzZXIifQ.LOQUfFb2QHFShXWwm2u0lMyZ-SkVRbIHj7tobQz6t45tDOdN1dNupH2fn7wmZdo8VHMaH0oGvuhWPetqjfHXIGkNuyTnepSLldD0p8sbqLmo66cJx8MThuYKr9IyzbCbQ5pO1jdTrta8QxdW8a15DdjQ3UpcrjaCkBZ6AeX0xyL_UCfZWgcI9GKPWMcMVnsRpR3crjZUdr5HQTl_TR2a1dYp3YAUB_GigA9CG_N9nd4pVlKKGqVZYuuVlTD_kHrtAJGSUxaK88aWCczxI33TkHNoDof7D8GYDvqOxSBFGT32lJImsHBpWN185FDyVvSORXrwCI5YavgMBb8K5Q8lDMiWobFp4N7AzxCnNlXe54PAWk-ifUt39k3cT6o9OIqYT9n2oXx4EjNYZViTN7QWTm0e-rJKRgPtNpEe4ElC1-759be87xd_DwM1jXpwhAdmcYLOGMzOLXAjVNYaiZjRDG8phLT8MsrjODA4adJdIJVEwZA7Co2GU3TbUYlXNw2H"
						}
					]
				}
			],
			"description": "To make an API request to an Intel® SecL-DC service, an authentication\r\ntoken is now required. API requests must now include an Authorization\r\nheader with an appropriate token:\r\n\r\n```\r\nAuthorization: Bearer <token>\r\n```\r\n\r\nThe token is issued by the AAS and will expire after a set amount of time.\r\nThis token may be used with any Intel® SecL-DC service, and will carry the\r\nappropriate permissions for the role(s) assigned to the account the token was\r\ngenerated for."
		},
		{
			"name": "Verify that hosts are registered and Trusted",
			"item": [
				{
					"name": "searchReports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var report = pm.response.json();\r",
									"pm.environment.set(\"hostHardwareUuid\",report.reports[0].host_info.hardware_uuid)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": "(Required)"
							}
						],
						"url": {
							"raw": "https://{{hvs}}:{{hvsPort}}/hvs/v2/reports?latestPerHost=true&hostName={{esxiHost}}",
							"protocol": "https",
							"host": [
								"{{hvs}}"
							],
							"port": "{{hvsPort}}",
							"path": [
								"hvs",
								"v2",
								"reports"
							],
							"query": [
								{
									"key": "id",
									"value": "<uuid>",
									"description": "Report ID",
									"disabled": true
								},
								{
									"key": "hostId",
									"value": "<uuid>",
									"description": "host Id of the host. If this parameter is specified, it will return report only for active host with specified host id.",
									"disabled": true
								},
								{
									"key": "hostHardwareId",
									"value": "<uuid>",
									"description": "Hardware UUID of the host. If this parameter is specified, it will return report only for active host with specified host hardware uuid.",
									"disabled": true
								},
								{
									"key": "hostStatus",
									"value": "<string>",
									"description": "Current state of an active host.  A list of host states is defined in the description section of the HostStatus.",
									"disabled": true
								},
								{
									"key": "numberOfDays",
									"value": "<integer>",
									"description": "Results returned will be restricted to between the current date and number of days prior. This option will override other date options.\nmin: 0\nmax: 365\n",
									"disabled": true
								},
								{
									"key": "fromDate",
									"value": "<dateTime>",
									"description": "Results returned will be restricted to after this date. Currently the following ISO 8601 date formats are supported for date parameters\n    date                                   Ex: fromDate=2006-01-02\n    date+time                              Ex: fromDate=2006-01-02 15:04:05\n    date+time(with milli seconds)          Ex: fromDate=2006-01-02T15:04:05.000Z\n    date+time(with micro seconds)          Ex: fromDate=2006-01-02T15:04:05.000000Z\n",
									"disabled": true
								},
								{
									"key": "toDate",
									"value": "<dateTime>",
									"description": "Results returned will be restricted to before this date. Currently the following ISO 8601 date formats are supported for date parameters\n    date                                   Ex: toDate=2006-01-02\n    date+time                              Ex: toDate=2006-01-02 15:04:05\n    date+time(with milli seconds)          Ex: toDate=2006-01-02T15:04:05.000Z\n    date+time(with micro seconds)          Ex: toDate=2006-01-02T15:04:05.000000Z\n",
									"disabled": true
								},
								{
									"key": "latestPerHost",
									"value": "true",
									"description": "Returns only the latest report for each host. If latestPerHost is specified in conjuction with a date filter, it will return the latest report for within the specified date range per host."
								},
								{
									"key": "limit",
									"value": "2000",
									"description": "This limits the overall number of results (all hosts included).",
									"disabled": true
								},
								{
									"key": "hostName",
									"value": "{{esxiHost}}"
								}
							]
						},
						"description": "Searches for Reports.\n\n<b>Report</b></br>\n\nA report contains the trust information produced by the flavor verification process. It provides details on if the host is trusted and the flavors it matched, or came closest to matching.\nIf the host is untrusted, the report will include faults which describe why the host is untrusted. These faults allow for easy analysis and remediation of an untrusted\nresult.\n\nA report can be returned in JSON format, or it can be returned in SAML format. A SAML report is provided in XML format and contains the same trust information in a specific attribute format.\nA SAML report also includes a signature that can be verified by the Host Verification Service’s SAML public key.\n\nReports have a configurable validity period with default period of 24 hours or 86400 seconds. The Host Verification service has a background refresh process that queries for reports where the expiration time is within the next 5 minutes, and triggers generation of a new report for all results.\nThis is checked every 2 minutes by default, and can be configured by changing property in the configuration. In this way fresh reports are generated before older reports expire."
					},
					"response": []
				}
			],
			"description": "To begin, you need to verify that all prerequisite steps were completed.\r\n\r\nVerify that the response lists all of the hosts, and that each Report shows “OVERALL=true”.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create Asset Tag Certificates for each host",
			"item": [
				{
					"name": "createTagCertificate",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "(Required)"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": "(Required)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\n    \"hardware_uuid\": \"{{hostHardwareUuid}}\",\n    \"selection_content\": [\n        {\n            \"name\": \"Country\",\n            \"value\": \"USA\"\n        },\n        {\n            \"name\": \"Department\",\n            \"value\": \"Finance\"\n        },\n        {\n            \"name\": \"Compliance\",\n            \"value\": \"PCI\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{hvs}}:{{hvsPort}}/hvs/v2/tag-certificates",
							"protocol": "https",
							"host": [
								"{{hvs}}"
							],
							"port": "{{hvsPort}}",
							"path": [
								"hvs",
								"v2",
								"tag-certificates"
							]
						},
						"description": "Creates an Asset Tag Certificate.\n\nAn \"Asset Tag\" is a host-specific certificate created with a set of\nuser-defined key/value pairs that can be used to \"tag\" a server at\nthe hardware level. Asset Tags are included in host attestation, verifying\nthat, if an Asset Tag has been deployed to a host, that the correct\nTag is included in the host's TPM Quote.\nAttestation Reports will display the key/value pairs associated with the Asset Tag, and can be used by\nscheduler services or compliance audit reporting.  One typical use case for Asset Tags is \"geolocation tagging\",\ntagging each host with key/value pairs matching the physical location of the host.\n\nThe serialized TagCertificateCreateRequest Go struct object represents the content of the request body.\n\n | Attribute         | Description |\n |-------------------|-------------|\n | hardware_uuid     | The hardware UUID of the host to which the tag certificate is associated. |\n | selection_content | an array of one or more key-value pairs with the tag selection attributes. |\n"
					},
					"response": []
				}
			],
			"description": "Asset Tags are a combination of an Asset Tag Certificate, and an Asset Tag Flavor based on that certificate that is associated with a host. \n\nThe Asset Tag Certificate is unique for each host, even if all of the key/value pairs are identical. The Subject of the certificate is the Hardware UUID of the server; this is used as part of the later Asset Tag Flavor matching, and to ensure that each Tag must be applied to a specific server. \n\nThe Asset Tag Certificate creation call consists of the Hardware UUID of the host and then a list of any number of key/value pairs. The key/value pairs are the actual Tags that will be reflected in the Attestation Reports for the host, and can represent locations or any other information. For example, a server could be tagged with “Country=USA; Department=Finance; Compliance=PCI”. \n\nRepeat this call for each host.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Deploy Asset Tags",
			"item": [
				{
					"name": "Calculate the Certificate Hash Value",
					"item": [],
					"description": "Only the hash value of the Asset Tag Certificate can be provisioned to the TPM, due to the low size of the NVRAM.\n\n1. Retrieve the Asset Tag Certificate. The Asset Tag Certificate can be retrieved either from the response when the Asset Tag certificate is created or by using a GET API request to retrieve the certificate.\n\n2. Copy only the “certificate” value (this will be the certificate in encoded format) and write the data to a file on a Linux system. Remove any line breaks and save the file. Assuming the filename used is “tag-cert”, use the following string to generate the correct hash:  \n \n   ```cat tag-cert | base64 --decode | openssl dgst -sha1 | awk -F\" \" '{print $2}' ``` \n\nThis hash value will be what is actually written to the TPM NVRAM. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Provision the Certificate Hash to the Host TPM",
					"item": [],
					"description": "Starting in ESXi 6.5u2, you can now use SSH to write Asset Tags directly with no need for TPM clears, reboots, PXE or BIOS access. SSH to the ESXi host using root credentials, then use the next command: \r\n\r\n```esxcli hardware tpm tag set -d <hash> ```\r\n\r\nYou can use the following command to verify that the tag was written: \r\n\r\n```esxcli hardware tpm tag get ```\r\n\r\nReboot the host. After rebooting, the TPM PCR 22 will have the measured value of the hash. "
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create Asset Tag Flavor",
			"item": [
				{
					"name": "createFlavors",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"description": "(Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": "(Required)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"connection_string\": \"vmware:https://{{vCenter}}:{{vCenterPort}}/sdk;h={{esxiHost}};u={{vCenterUsername}};p={{vCenterPassword}}\",\n    \"partial_flavor_types\": [\n        \"ASSET_TAG\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hvs}}:{{hvsPort}}/hvs/v2/flavors",
							"protocol": "https",
							"host": [
								"{{hvs}}"
							],
							"port": "{{hvsPort}}",
							"path": [
								"hvs",
								"v2",
								"flavors"
							]
						},
						"description": "Creates new flavor(s) in database.</br>\n\nFlavors can be created by directly providing the flavor content in the request body, or they can be imported from a host. If the flavor content is provided, the flavor parameter must be set in the request. If the flavor is being imported from a host, the host connection string must be specified.\n\nIf a flavor group is not specified, the flavor(s) created will be assigned to the default “automatic” flavor group, with the exception of the host unique flavors, which are associated with the “host_unique” flavor group. If a flavor group is specified and does not already exist, it will be created with a default flavor match policy.\n\nPartial flavor types can be specified as an array input. In this fashion, the user can choose which flavor types to import from a host. Only flavor types that are defined in the flavor group flavor match policy can be specified. If no partial flavor types are provided, the default action is to attempt retrieval of all flavor types. The response will contain all flavor types that it was able to create.\n\nIf generic flavors are created, all hosts in the flavor group will be added to the backend queue, flavor verification process to re-evaluate their trust status. If host unique flavors are created, the individual affected hosts are added to the flavor verification process.\n\n\nThe serialized FlavorCreateRequest Go struct object represents the content of the request body.\n\n | Attribute                      | Description                                     |\n |--------------------------------|-------------------------------------------------|\n | connection_string              | (Optional) The host connection string. flavorgroup_name, partial_flavor_types, tls_policy_id can be provided as optional parameters along with the host connection string. |\n |                                | For INTEL hosts, this would have the vendor name, the IP addresses, or DNS host name and credentials i.e.: \"intel:https://trustagent.server.com:1443\" |\n |                                | For VMware, this includes the vCenter and host IP address or DNS host name i.e.: \"vmware:https://vCenterServer.com:443/sdk;h=host;u=vCenterUsername;p=vCenterPassword\" |\n | flavors                        | (Optional) A collection of flavors in the defined flavor format. No other parameters are needed in this case.\n | signed_flavors                 | (Optional) This is collection of signed flavors consisting of flavor and signature provided by user. |\n | flavorgroup_name               | (Optional) Flavor group name that the created flavor(s) will be associated with. If not provided, created flavor will be associated with automatic flavor group. |\n | partial_flavor_types           | (Optional) List array input of flavor types to be imported from a host. Partial flavor type can be any of the following: PLATFORM, OS, ASSET_TAG, HOST_UNIQUE, SOFTWARE. Can be provided with the host connection string. See the product guide for more details on how flavor types are broken down for each host type. |"
					},
					"response": []
				}
			],
			"description": "For VMware ESXi hosts, the Asset Tag Flavor must be created by importing it from the host after the Tag has been provisioned. \r\n\r\nOnce the Asset Tag Flavor is imported, the host can be attested including Asset Tags as normal."
		},
		{
			"name": "Create new Attestation Reports for each host",
			"item": [
				{
					"name": "createReport",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "(Required)"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"description": "(Required)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host_name\": \"{{esxiHost}}\"\n}"
						},
						"url": {
							"raw": "https://{{hvs}}:{{hvsPort}}/hvs/v2/reports",
							"protocol": "https",
							"host": [
								"{{hvs}}"
							],
							"port": "{{hvsPort}}",
							"path": [
								"hvs",
								"v2",
								"reports"
							]
						},
						"description": "Creates a Report.\n\nThe serialized ReportCreateRequest Go struct object represents the content of the request body.\n\n | Attribute                      | Description|\n |--------------------------------|------------|\n | host_id                        | ID of host |\n | host_name                      | hostname of host |\n | hardware_uuid                  | Hardware UUID of host |\n"
					},
					"response": []
				}
			],
			"description": "Deploying the Asset Tags does not actually create a new Attestation Report, so you will need to create a new Report for each tagged host. \r\n\r\nInstead of only retrieve existing automatically-generated Reports, you will create a new Report for each host. \r\nRepeat this step for each registered host. \r\n\r\nNote that each new Report will now contain an additional Flavor section for the Asset Tag; this will show whether the Tag is Trusted (meaning the most recent currently valid Asset Tag certificate for that host is actually reflected in the host TPM), and will expose all of the key/value pairs used in the Asset Tag Certificate that was deployed. ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}