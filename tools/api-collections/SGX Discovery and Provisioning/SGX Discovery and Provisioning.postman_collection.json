{
	"info": {
		"_postman_id": "e781c4b1-6eaa-492c-960d-fb1cbe1e2eb3",
		"name": "SGX Discovery and Provisioning",
		"description": "For the secrets to be provisioned securely to SGX compute nodes in public clouds, the owner of the secret needs to ensure that the secrets will be protected in SGX enclaves by performing an SGX Attestation.\r\n\r\nSGX Attestation involves provisioning SGX nodes with Platform Certification Key (PCK) certificates. PCK certificates for SGX nodes are obtained by providing the node SGX data to the Intel SGX Provisioning Certificate Service (PCS), a cloud hosted service. PCS also returns SGX collateral such as CRLs, TCB information and QE Identity.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "createCspAdminToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenCspAdmin\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{cspAdminUser}}\",\n    \"password\": \"{{cspAdminUserPass}}\"\n}"
						},
						"url": {
							"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/token",
							"protocol": "https",
							"host": [
								"{{aasCsp}}"
							],
							"port": "{{aasPortCsp}}",
							"path": [
								"aas",
								"v1",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API\nrequests. Bearer token Authorization is not required when requesting token for Authservice\nregistered users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{cspAdminUser}}\",\n    \"password\": \"{{cspAdminUserPass}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/token",
									"protocol": "https",
									"host": [
										"{{aasCsp}}"
									],
									"port": "{{aasPortCsp}}",
									"path": [
										"aas",
										"v1",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Thu, 11 Mar 2021 06:46:51 GMT"
								},
								{
									"key": "Content-Length",
									"value": "883"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjUxNTcxYmZmYjdhNDY1NTIyNzZmNWVkZjU2NWJlZDdkZmU3ZTkzZTEiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IkFBUyIsIm5hbWUiOiJDdXN0b21DbGFpbXNDcmVhdG9yIn1dLCJwZXJtaXNzaW9ucyI6W3sic2VydmljZSI6IkFBUyIsInJ1bGVzIjpbImN1c3RvbV9jbGFpbXM6Y3JlYXRlIl19XSwiZXhwIjoxNjE1NDUyNDExLCJpYXQiOjE2MTU0NDUxODEsImlzcyI6IkFBUyBKV1QgSXNzdWVyIiwic3ViIjoiY3NwX2FkbWluIn0.clwnpJZpkD_zOFviJ741VCf1n-nz9ban5JrgyvUwxA82fiNZ1F1oP78tpBPOHxGmkCxH-tkAhuj-88JcsRbbEtMsefHCHXWtN0XCY-1KYkRWuEezYRZQfMkPYEp7k01r3CL35h-rpDNWBW89aIkcqSbD0rOZ422puK1GJmiPYOExXnR5GjwSWMtrzsErLtv0ubtiSbEMfNkL9BgSCd0bI2Bt8NgTVSKvwdL2zzXxcgyMBDun4rVLTYd3uZcNEOy0LD5XFGka_1rp4uuXeHEFEt6jbFS4fvIypPcTJ-M29NZXCyJ5Mz2EPOH2L-tWPGx0Tr2vihPF64f-zGlVAY2k69tYQMM2zk4sGlHkkjQ_zuAcDD3D9aAFPPPTrLKcWeSd7xceGzXH5ZJhU4xSMogAaZWAHJV2BZUJ-uBza9IL_p9NwBXfcNg2P5nqhKwBBstctTHm9vro5ASgXjh3zthwg2vPRxQdoTGdmNT92O_tLGx_0VoBK3S6hhMks4TL82Ud"
						}
					]
				},
				{
					"name": "CreateSagentToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenSagent\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenCspAdmin}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/jwt",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"{{hostHardwareUuid}}\",\n    \"validity_seconds\": {{validity}},\n    \"claims\": {\n        \"roles\": [\n            {\n                \"service\": \"SCS\",\n                \"name\": \"HostDataUpdater\"\n            },\n            {\n                \"service\": \"SCS\",\n                \"name\": \"HostDataReader\"\n            },\n            {\n                \"service\": \"SHVS\",\n                \"name\": \"HostDataUpdater\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/custom-claims-token",
							"protocol": "https",
							"host": [
								"{{aasCsp}}"
							],
							"port": "{{aasPortCsp}}",
							"path": [
								"aas",
								"v1",
								"custom-claims-token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API\nrequests. Bearer token Authorization is required when requesting custom claims token\nfrom Authservice."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenCspAdmin}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subject\": \"{{hostHardwareUuid}}\",\n    \"validity_seconds\": {{validity}},\n    \"claims\": {\n        \"roles\": [\n            {\n                \"service\": \"SCS\",\n                \"name\": \"HostDataUpdater\"\n            },\n            {\n                \"service\": \"SCS\",\n                \"name\": \"HostDataReader\"\n            },\n            {\n                \"service\": \"SHVS\",\n                \"name\": \"HostDataUpdater\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/custom-claims-token",
									"protocol": "https",
									"host": [
										"{{aasCsp}}"
									],
									"port": "{{aasPortCsp}}",
									"path": [
										"aas",
										"v1",
										"custom-claims-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Thu, 11 Mar 2021 10:35:42 GMT"
								},
								{
									"key": "Content-Length",
									"value": "939"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjUxNTcxYmZmYjdhNDY1NTIyNzZmNWVkZjU2NWJlZDdkZmU3ZTkzZTEiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sibmFtZSI6Ikhvc3REYXRhVXBkYXRlciIsInNlcnZpY2UiOiJTQ1MifSx7Im5hbWUiOiJIb3N0RGF0YVJlYWRlciIsInNlcnZpY2UiOiJTQ1MifSx7Im5hbWUiOiJIb3N0RGF0YVVwZGF0ZXIiLCJzZXJ2aWNlIjoiU0hWUyJ9XSwiZXhwIjoxNjE1NDk0OTQyLCJpYXQiOjE2MTU0NTg5MTIsImlzcyI6IkFBUyBKV1QgSXNzdWVyIiwic3ViIjoiODg4ODg4ODgtODg4Ny0wZjE1LTAxMTEtMTcxZWE1YTVhNWE1In0.DNAqis1G0dnokWxabLfz0nsUVSX1-VooxRqdo4UwOsEeueCaG2FlltA_ix-KzYH4-B47OrD5L9_vMLj1CzW_WWQ6yfrLQu91iDk6DjtL12NjDk0LMRLDgdEBIzLBFKJZPNFVj7ThwO_0LORLO-ctMwQSvizSIXe-ZUCW5o1HjSn20w9FDUxlE-jXbfubo9OFPouSbQ20OM6M4F79b3KUNm2di3jAmGnGSsSuaesAJhx66IEMK0kzBpEjyaVaGBbKQwfSZaORTtncENr9yW000SZjDdQP4UzZWA7wr3_6TAznf3nqPB81V2rkdxyR4gDpvNdaDAyIzt8fuwEjP0U7skA85SVVFrvGbBAJnD7XPJnu6Om5x9fQ8fICGpGRtebrLA38iLc26-m_FXCpvoSUUo51s22rATjqovdrtFEQeHe2ZCVRHPQBzZjZlCwkNZo2Xet7cax0IZ_qyfVCbhotKQ6-pNry0K9asVXsTP2eM3TQWj9NJJfCAdB_dKkKTBiL"
						}
					]
				},
				{
					"name": "createKbsToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenKbs\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{kbsUser}}\",\r\n    \"password\": \"{{kbsUserPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{aasEnt}}:{{aasPortEnt}}/aas/v1/token",
							"protocol": "https",
							"host": [
								"{{aasEnt}}"
							],
							"port": "{{aasPortEnt}}",
							"path": [
								"aas",
								"v1",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is not required when requesting token for Authservice admin user. Authservice admin user bearer token should be provided in Authorization header when requesting bearer token for other users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{kbsUser}}\",\r\n    \"password\": \"{{kbsUserPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aasEnt}}:{{aasPortEnt}}/aas/v1/token",
									"protocol": "https",
									"host": [
										"{{aasEnt}}"
									],
									"port": "{{aasPortEnt}}",
									"path": [
										"aas",
										"v1",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Dec 2020 09:58:54 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1127"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjA1Njk2NTA0Zjc0YjMyZTU4ZGU0ZTE5YmE0ZWJhZDc4MDQwMDc3MTQiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IktCUyIsIm5hbWUiOiJVc2VyUm9sZU1hbmFnZXIifSx7InNlcnZpY2UiOiJBQVMiLCJuYW1lIjoiQWRtaW5pc3RyYXRvciJ9LHsic2VydmljZSI6IkNNUyIsIm5hbWUiOiJDZXJ0QXBwcm92ZXIiLCJjb250ZXh0IjoiQ049S0JTIFRMUyBDZXJ0aWZpY2F0ZTtTQU49MTAuMTA1LjE2OC4yMDcsa2JzaG9zdG5hbWU7Q0VSVFRZUEU9VExTIn0seyJzZXJ2aWNlIjoiU1FWUyIsIm5hbWUiOiJRdW90ZVZlcmlmaWVyIn1dLCJwZXJtaXNzaW9ucyI6W3sic2VydmljZSI6IkFBUyIsInJ1bGVzIjpbIio6KjoqIl19XSwiZXhwIjoxNjA4MTE5OTM0LCJpYXQiOjE2MDgxMTI3MDQsImlzcyI6IkFBUyBKV1QgSXNzdWVyIiwic3ViIjoiYWRtaW5Aa2JzIn0.hsWnvJ4grPSMx2GbQ0z4UvdGl1YfS0BEp9AqUGz7Gpa9LHkVbJMeJBSXzBlYlK8ahkqTy5QEOWgoMeYzAYI5kmQ-47xg5rBRi1GK7eLdvySGBL-AKCTu-aYeLyZ-WV1vtz1bIfa12_ZPEM0mVdUx0dP5swPx4zZ0eskjeL2vqISrOLR4UVEZ9kdN9ggGNHBDa_1RHgruomw_0A3Bv2hr4F4NmtD0L9QRy15WyhZR7xMshpFW69iRrZkvbYbsE7lwKF2WJR4COtStDlTkleb7_8uZ32k8PgurivFP9umRYYXvjWiWoC6YFrmZFih5w2qCm0uVxxZk6kpq9hTgo43kQkkdZUd8deFW_YTOxtLhTUzApZdBMQkJxJvPEDzlkjJVBZpWCNPEo_zCqahNVgi99EMnK05qJI-wXwyyLp8W5XBv1fFWW5XwKD-0FQlNz7cWmwnx0FfspYXY6nUo2E7P-B0GpeToXUUPQ0UqUUfLdSDr_jS3n3Z-d0QHx2CE22li"
						}
					]
				}
			],
			"description": "To make an API request to an Intel® SecL-DC service, an authentication\r\ntoken is now required. API requests must now include an Authorization\r\nheader with an appropriate token:\r\n\r\n```\r\nAuthorization: Bearer <token>\r\n```\r\n\r\nThe token is issued by the AAS and will expire after a set amount of time.\r\nThis token may be used with any Intel® SecL-DC service, and will carry the\r\nappropriate permissions for the role(s) assigned to the account the token was\r\ngenerated for."
		},
		{
			"name": "Verify Services",
			"item": [],
			"description": "The command line option can be used to confirm that all services are up and running before proceeding to the actual use case demonstration.\n\nVerify SGX Agent:\n\n```\nsgx_agent status\n```\n\nVerify SGX Caching Service (SCS):\n\n```\nscs status\n```\n\nVerify SGX Quote Verification Service (SQVS):\n\n```\nsqvs status\n```\n\nVerify Key Broker Service (KBS):\n\n```\nkbs status\n```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Push Platform Information to SGX CS",
			"item": [
				{
					"name": "pushPlatformInfo",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenSagent}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cpu_svn\": \"{{cpusvn}}\",\n    \"enc_ppid\": \"{{encppid}}\",\n    \"manifest\": \"{{manifest}}\",\n    \"pce_id\": \"{{pceid}}\",\n    \"pce_svn\": \"{{pcesvn}}\",\n    \"qe_id\": \"{{qeid}}\",\n    \"hardware_uuid\": \"{{hostHardwareUuid}}\"  \n}"
						},
						"url": {
							"raw": "https://{{scs}}:{{scsPort}}/scs/sgx/certification/v1/platforms",
							"protocol": "https",
							"host": [
								"{{scs}}"
							],
							"port": "{{scsPort}}",
							"path": [
								"scs",
								"sgx",
								"certification",
								"v1",
								"platforms"
							]
						},
						"description": "SGX Agent uses this API to push the platform values (such as enc_ppi, pceid, cpisvn, pcesvn, qeid, hardware UUID and manifest) to SCS.\nA valid bearer token should be provided to authorize this REST call."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{bearerTokenSagent}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cpu_svn\": \"{{cpusvn}}\",\n    \"enc_ppid\": \"{{encppid}}\",\n    \"manifest\": \"{{manifest}}\",\n    \"pce_id\": \"{{pceid}}\",\n    \"pce_svn\": \"{{pcesvn}}\",\n    \"qe_id\": \"{{qeid}}\",\n    \"hardware_uuid\": \"{{hostHardwareUuid}}\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{scs}}:{{scsPort}}/scs/sgx/certification/v1/platforms",
									"protocol": "https",
									"host": [
										"{{scs}}"
									],
									"port": "{{scsPort}}",
									"path": [
										"scs",
										"sgx",
										"certification",
										"v1",
										"platforms"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Fri, 12 Feb 2021 10:23:01 GMT"
								},
								{
									"key": "Content-Length",
									"value": "61"
								}
							],
							"cookie": [],
							"body": "{\n    \"Status\": \"Success\",\n    \"Message\": \"platform data pushed to scs\"\n}"
						}
					]
				}
			],
			"description": "SGX Agent pushes platform information to SGX Caching Service (SCS), which uses it to get the PCK Certificate and other SGX collateral from the Intel SGX Provisioning Certification Service (PCS) and caches them locally. When a workload on the platform needs to generate an SGX Quote, it retrieves the PCK Certificate of the platform from SCS.\r\n\r\nSGX Agent makes use of the following SGX Caching Service (SCS) REST endpoint, to push SGX platform values (encrypted_ppid, pcesvn, cpusvn, qeid, pceid and manifest).\r\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Verify TCB Info",
			"item": [
				{
					"name": "tcbInfo",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{scs}}:{{scsPort}}/scs/sgx/certification/v1/tcb?fmspc={{fmpsc}}",
							"protocol": "https",
							"host": [
								"{{scs}}"
							],
							"port": "{{scsPort}}",
							"path": [
								"scs",
								"sgx",
								"certification",
								"v1",
								"tcb"
							],
							"query": [
								{
									"key": "fmspc",
									"value": "{{fmpsc}}",
									"description": "FMSPC value of the platform."
								}
							]
						},
						"description": "Retrieves the Trusted Computing Base (TCB) information for all TCB levels of the SGX enabled platform \nwith the provided FMPSC value.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{scs}}:{{scsPort}}/scs/sgx/certification/v1/tcb?fmspc={{fmpsc}}",
									"protocol": "https",
									"host": [
										"{{scs}}"
									],
									"port": "{{scsPort}}",
									"path": [
										"scs",
										"sgx",
										"certification",
										"v1",
										"tcb"
									],
									"query": [
										{
											"key": "fmspc",
											"value": "{{fmpsc}}",
											"description": "FMSPC value of the platform."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "SGX-TCB-Info-Issuer-Chain",
									"value": "-----BEGIN%20CERTIFICATE-----%0AMIICkDCCAjagAwIBAgIUTh8n662T%2FsqPZK%2B7n3H67%2FKGwu0wCgYIKoZIzj0EAwIw%0AaDEaMBgGA1UEAwwRSW50ZWwgU0dYIFJvb3QgQ0ExGjAYBgNVBAoMEUludGVsIENv%0AcnBvcmF0aW9uMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJ%0ABgNVBAYTAlVTMB4XDTE5MTAzMTEyMzUwMloXDTI2MTAzMTEyMzUwMlowbDEeMBwG%0AA1UEAwwVSW50ZWwgU0dYIFRDQiBTaWduaW5nMRowGAYDVQQKDBFJbnRlbCBDb3Jw%0Ab3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYD%0AVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOnYw9LbN%2FJmyUttXa0M%0AiBEenjPbxbR4C8MuVYxDI%2BLe8lDBLp9X4wMzCAUF%2FfI%2F31giClXp%2Fy0erLbLZjdV%0A07%2BjgbkwgbYwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0f%0ABE8wTTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2%0AaWNlcy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuY3JsMB0GA1UdDgQWBBROHyfr%0ArZP%2Byo9kr7ufcfrv8obC7TAOBgNVHQ8BAf8EBAMCBsAwDAYDVR0TAQH%2FBAIwADAK%0ABggqhkjOPQQDAgNIADBFAiEAxhkJ8vcmucFrENPm9AZbfDHL1VBv2U%2Be6QkYmPyK%0Ahh0CIFMjBrlJNQYhSgU5hwinXHvgcFNZ%2Bn5%2BoHf6RNb7OlY7%0A-----END%20CERTIFICATE-----%0A-----BEGIN%20CERTIFICATE-----%0AMIIClDCCAjmgAwIBAgIVAOnoRFJTNlxLGJoR%2FEMYLKXcIIBIMAoGCCqGSM49BAMC%0AMGgxGjAYBgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBD%0Ab3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQsw%0ACQYDVQQGEwJVUzAeFw0xOTEwMzEwOTQ5MjFaFw00OTEyMzEyMzU5NTlaMGgxGjAY%0ABgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3Jh%0AdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYDVQQG%0AEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE%2F6D%2F1WHNrWwPmNMIyBKMW5%0AJ6JzMsjo6xP2vkK1cdZGb1PGRP%2FC%2F8ECgiDkmklmzwLzLi%2B000m7LLrtKJA3oC2j%0Agb8wgbwwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0fBE8w%0ATTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2aWNl%0Acy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuY3JsMB0GA1UdDgQWBBTp6ERSUzZc%0ASxiaEfxDGCyl3CCASDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH%2FBAgwBgEB%2FwIB%0AATAKBggqhkjOPQQDAgNJADBGAiEA0RWrsGrGlDp76l9LQjt%2BzMqQZPB%2F2YuuueFU%0AgN9AdkMCIQDo9ANUhcStABChR6rlVoBo6MQ6QumCnk%2BpdGBEy8%2FsQg%3D%3D%0A-----END%20CERTIFICATE-----%0A"
								},
								{
									"key": "Date",
									"value": "Mon, 31 Aug 2020 22:20:07 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1525"
								}
							],
							"cookie": [],
							"body": "{\n    \"tcbInfo\": {\n        \"version\": 2,\n        \"issueDate\": \"2020-08-31T14:00:05Z\",\n        \"nextUpdate\": \"2020-09-30T14:00:05Z\",\n        \"fmspc\": \"20606a000000\",\n        \"pceId\": \"0000\",\n        \"tcbType\": 0,\n        \"tcbEvaluationDataNumber\": 5,\n        \"tcbLevels\": [\n            {\n                \"tcb\": {\n                    \"sgxtcbcomp01svn\": 2,\n                    \"sgxtcbcomp02svn\": 2,\n                    \"sgxtcbcomp03svn\": 0,\n                    \"sgxtcbcomp04svn\": 0,\n                    \"sgxtcbcomp05svn\": 0,\n                    \"sgxtcbcomp06svn\": 0,\n                    \"sgxtcbcomp07svn\": 0,\n                    \"sgxtcbcomp08svn\": 0,\n                    \"sgxtcbcomp09svn\": 0,\n                    \"sgxtcbcomp10svn\": 0,\n                    \"sgxtcbcomp11svn\": 0,\n                    \"sgxtcbcomp12svn\": 0,\n                    \"sgxtcbcomp13svn\": 0,\n                    \"sgxtcbcomp14svn\": 0,\n                    \"sgxtcbcomp15svn\": 0,\n                    \"sgxtcbcomp16svn\": 0,\n                    \"pcesvn\": 10\n                },\n                \"tcbDate\": \"2020-05-28T00:00:00Z\",\n                \"tcbStatus\": \"UpToDate\"\n            },\n            {\n                \"tcb\": {\n                    \"sgxtcbcomp01svn\": 1,\n                    \"sgxtcbcomp02svn\": 1,\n                    \"sgxtcbcomp03svn\": 0,\n                    \"sgxtcbcomp04svn\": 0,\n                    \"sgxtcbcomp05svn\": 0,\n                    \"sgxtcbcomp06svn\": 0,\n                    \"sgxtcbcomp07svn\": 0,\n                    \"sgxtcbcomp08svn\": 0,\n                    \"sgxtcbcomp09svn\": 0,\n                    \"sgxtcbcomp10svn\": 0,\n                    \"sgxtcbcomp11svn\": 0,\n                    \"sgxtcbcomp12svn\": 0,\n                    \"sgxtcbcomp13svn\": 0,\n                    \"sgxtcbcomp14svn\": 0,\n                    \"sgxtcbcomp15svn\": 0,\n                    \"sgxtcbcomp16svn\": 0,\n                    \"pcesvn\": 9\n                },\n                \"tcbDate\": \"2020-03-22T00:00:00Z\",\n                \"tcbStatus\": \"OutOfDate\"\n            },\n            {\n                \"tcb\": {\n                    \"sgxtcbcomp01svn\": 1,\n                    \"sgxtcbcomp02svn\": 1,\n                    \"sgxtcbcomp03svn\": 0,\n                    \"sgxtcbcomp04svn\": 0,\n                    \"sgxtcbcomp05svn\": 0,\n                    \"sgxtcbcomp06svn\": 0,\n                    \"sgxtcbcomp07svn\": 0,\n                    \"sgxtcbcomp08svn\": 0,\n                    \"sgxtcbcomp09svn\": 0,\n                    \"sgxtcbcomp10svn\": 0,\n                    \"sgxtcbcomp11svn\": 0,\n                    \"sgxtcbcomp12svn\": 0,\n                    \"sgxtcbcomp13svn\": 0,\n                    \"sgxtcbcomp14svn\": 0,\n                    \"sgxtcbcomp15svn\": 0,\n                    \"sgxtcbcomp16svn\": 0,\n                    \"pcesvn\": 0\n                },\n                \"tcbDate\": \"2020-03-22T00:00:00Z\",\n                \"tcbStatus\": \"OutOfDate\"\n            }\n        ]\n    },\n    \"signature\": \"f6d3720de2bda91036db982552e816d341ce33f9966958e1bdc402eee9ccb7dbc21b980e35adf084d86be05d0170748e9e81a744f08b63a5b6eeb2df583ac731\"\n}"
						}
					]
				}
			],
			"description": "SGX Caching Service (SCS) validates the input parameters and contacts Intel PCS Server to get all PCK certificates for this platform by providing enc_ppid and pceid as input parameters.\r\n\r\nIntel PCS Server returns a list of Platform Certification Key (PCK) Certificates for the platform along with certificate issuer chain. SCS picks any Certificate from the list of certificates and extracts the FMSPC value.\r\n\r\nUsing the FMSPC value, SCS gets the corresponding TCBInfo for the FMSPC in DB, if not found makes another API call to Intel PCS Server to get the TCBInfo structure for the platform.\r\n\r\nWith the TCBInfo structure, cpusvn, pcesvn, pceid and list of Platform Certification Key (PCK) certificates as input, SCS makes a call to PCK Certificate selection library (Part of SGX DCAP infrastructure) to get the best suited PCK certificate for the current raw TCB level.\r\n\r\nSCS updates the Platform table with the latest fmspc value along with platform values.\r\n\r\nSCS updates the PCKCert table with the new set of PCK certificates received along with corresponding tcbm value for each pck certificate.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Verify PCK Certificate",
			"item": [
				{
					"name": "pckCertificate",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-pem-file",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{scs}}:{{scsPort}}/scs/sgx/certification/v1/pckcert?encrypted_ppid={{encppid}}&cpusvn={{cpusvn}}&pcesvn={{pcesvn}}&pceid={{pceid}}&qeid={{qeid}}",
							"protocol": "https",
							"host": [
								"{{scs}}"
							],
							"port": "{{scsPort}}",
							"path": [
								"scs",
								"sgx",
								"certification",
								"v1",
								"pckcert"
							],
							"query": [
								{
									"key": "encrypted_ppid",
									"value": "{{encppid}}",
									"description": "Encrypted Platform Provisioning ID."
								},
								{
									"key": "cpusvn",
									"value": "{{cpusvn}}",
									"description": "CPU SVN of the platform."
								},
								{
									"key": "pcesvn",
									"value": "{{pcesvn}}",
									"description": "PCE SVN of the platform."
								},
								{
									"key": "pceid",
									"value": "{{pceid}}",
									"description": "PCE ID of the platform."
								},
								{
									"key": "qeid",
									"value": "{{qeid}}",
									"description": "Quoting Enclave ID specific to a platform."
								}
							]
						},
						"description": "Retrieves the Platform Certification Key (PCK) Certificate for the current TCB level of SGX enabled platform \nwith the provided platform values.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/x-pem-file",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{scs}}:{{scsPort}}/scs/sgx/certification/v1/pckcert?encrypted_ppid={{encppid}}&cpusvn={{cpusvn}}&pcesvn={{pcesvn}}&pceid={{pceid}}&qeid={{qeid}}",
									"protocol": "https",
									"host": [
										"{{scs}}"
									],
									"port": "{{scsPort}}",
									"path": [
										"scs",
										"sgx",
										"certification",
										"v1",
										"pckcert"
									],
									"query": [
										{
											"key": "encrypted_ppid",
											"value": "{{encppid}}",
											"description": "Encrypted Platform Provisioning ID."
										},
										{
											"key": "cpusvn",
											"value": "{{cpusvn}}",
											"description": "CPU SVN of the platform."
										},
										{
											"key": "pcesvn",
											"value": "{{pcesvn}}",
											"description": "PCE SVN of the platform."
										},
										{
											"key": "pceid",
											"value": "{{pceid}}",
											"description": "PCE ID of the platform."
										},
										{
											"key": "qeid",
											"value": "{{qeid}}",
											"description": "Quoting Enclave ID specific to a platform."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "raw",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/x-pem-file"
								},
								{
									"key": "sgx-pck-certificate-issuer-chain",
									"value": "-----BEGIN%20CERTIFICATE-----%0AMIICmzCCAkCgAwIBAgIUWSPTp0qoY1QuOXCt4A8HK1ckKrcwCgYIKoZIzj0EAwIw%0AaDEaMBgGA1UEAwwRSW50ZWwgU0dYIFJvb3QgQ0ExGjAYBgNVBAoMEUludGVsIENv%0AcnBvcmF0aW9uMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJ%0ABgNVBAYTAlVTMB4XDTE5MTAzMTEyMzQzMVoXDTM0MTAzMTEyMzQzMVowcDEiMCAG%0AA1UEAwwZSW50ZWwgU0dYIFBDSyBQbGF0Zm9ybSBDQTEaMBgGA1UECgwRSW50ZWwg%0AQ29ycG9yYXRpb24xFDASBgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQIDAJDQTEL%0AMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQwp%2BLc%2BTUBtg1H%0A%2BU8JIsMsbjHjCkTtXb8jPM6r2dhu9zIblhDZ7INfqt3Ix8XcFKD8k0NEXrkZ66qJ%0AXa1KzLIKo4G%2FMIG8MB8GA1UdIwQYMBaAFOnoRFJTNlxLGJoR%2FEMYLKXcIIBIMFYG%0AA1UdHwRPME0wS6BJoEeGRWh0dHBzOi8vc2J4LWNlcnRpZmljYXRlcy50cnVzdGVk%0Ac2VydmljZXMuaW50ZWwuY29tL0ludGVsU0dYUm9vdENBLmNybDAdBgNVHQ4EFgQU%0AWSPTp0qoY1QuOXCt4A8HK1ckKrcwDgYDVR0PAQH%2FBAQDAgEGMBIGA1UdEwEB%2FwQI%0AMAYBAf8CAQAwCgYIKoZIzj0EAwIDSQAwRgIhAIRoXu3Y45VF9aCiK0Z2K6EQKCtC%0ArxTTiZ4JYbEyfBGsAiEAiVoYmxF7K%2FSoqIjff1zG0%2FLiv%2FRIOR%2FQBJ5%2Bd88HAYI%3D%0A-----END%20CERTIFICATE-----%0A-----BEGIN%20CERTIFICATE-----%0AMIIClDCCAjmgAwIBAgIVAOnoRFJTNlxLGJoR%2FEMYLKXcIIBIMAoGCCqGSM49BAMC%0AMGgxGjAYBgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBD%0Ab3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQsw%0ACQYDVQQGEwJVUzAeFw0xOTEwMzEwOTQ5MjFaFw00OTEyMzEyMzU5NTlaMGgxGjAY%0ABgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3Jh%0AdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYDVQQG%0AEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE%2F6D%2F1WHNrWwPmNMIyBKMW5%0AJ6JzMsjo6xP2vkK1cdZGb1PGRP%2FC%2F8ECgiDkmklmzwLzLi%2B000m7LLrtKJA3oC2j%0Agb8wgbwwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0fBE8w%0ATTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2aWNl%0Acy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuY3JsMB0GA1UdDgQWBBTp6ERSUzZc%0ASxiaEfxDGCyl3CCASDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH%2FBAgwBgEB%2FwIB%0AATAKBggqhkjOPQQDAgNJADBGAiEA0RWrsGrGlDp76l9LQjt%2BzMqQZPB%2F2YuuueFU%0AgN9AdkMCIQDo9ANUhcStABChR6rlVoBo6MQ6QumCnk%2BpdGBEy8%2FsQg%3D%3D%0A-----END%20CERTIFICATE-----%0A"
								},
								{
									"key": "sgx-tcbm",
									"value": "020200000000000000000000000000000A00"
								},
								{
									"key": "Date",
									"value": "Mon, 31 Aug 2020 22:23:12 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1756"
								}
							],
							"cookie": [],
							"body": "-----BEGIN CERTIFICATE-----\nMIIE5jCCBI2gAwIBAgIUREp9Y6te5RUApptRo1iJYgqHIWwwCgYIKoZIzj0EAwIwcDEiMCAGA1UE\nAwwZSW50ZWwgU0dYIFBDSyBQbGF0Zm9ybSBDQTEaMBgGA1UECgwRSW50ZWwgQ29ycG9yYXRpb24x\nFDASBgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQIDAJDQTELMAkGA1UEBhMCVVMwHhcNMjAwODMx\nMTQwMDA0WhcNMjcwODMxMTQwMDA0WjBwMSIwIAYDVQQDDBlJbnRlbCBTR1ggUENLIENlcnRpZmlj\nYXRlMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJ\nBgNVBAgMAkNBMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDnwRZCe/kjZ\ng8RqXcfa1b1VYGmMYb+iNIygZXONuG48cW90myE7bzRoc9iUfLfCzK0KwQtzkv/SDdZIWjCaz9aj\nggMDMIIC/zAfBgNVHSMEGDAWgBRZI9OnSqhjVC45cK3gDwcrVyQqtzBiBgNVHR8EWzBZMFegVaBT\nhlFodHRwczovL3NieC5hcGkudHJ1c3RlZHNlcnZpY2VzLmludGVsLmNvbS9zZ3gvY2VydGlmaWNh\ndGlvbi92My9wY2tjcmw/Y2E9cGxhdGZvcm0wHQYDVR0OBBYEFDukc1cCVg8XF9c6bbUN2gveuT1K\nMA4GA1UdDwEB/wQEAwIGwDAMBgNVHRMBAf8EAjAAMIICOQYJKoZIhvhNAQ0BBIICKjCCAiYwHgYK\nKoZIhvhNAQ0BAQQQOgs1S+PfrqacSaRqIbH+xzCCAWMGCiqGSIb4TQENAQIwggFTMBAGCyqGSIb4\nTQENAQIBAgECMBAGCyqGSIb4TQENAQICAgECMBAGCyqGSIb4TQENAQIDAgEAMBAGCyqGSIb4TQEN\nAQIEAgEAMBAGCyqGSIb4TQENAQIFAgEAMBAGCyqGSIb4TQENAQIGAgEAMBAGCyqGSIb4TQENAQIH\nAgEAMBAGCyqGSIb4TQENAQIIAgEAMBAGCyqGSIb4TQENAQIJAgEAMBAGCyqGSIb4TQENAQIKAgEA\nMBAGCyqGSIb4TQENAQILAgEAMBAGCyqGSIb4TQENAQIMAgEAMBAGCyqGSIb4TQENAQINAgEAMBAG\nCyqGSIb4TQENAQIOAgEAMBAGCyqGSIb4TQENAQIPAgEAMBAGCyqGSIb4TQENAQIQAgEAMBAGCyqG\nSIb4TQENAQIRAgEKMB8GCyqGSIb4TQENAQISBBACAgAAAAAAAAAAAAAAAAAAMBAGCiqGSIb4TQEN\nAQMEAgAAMBQGCiqGSIb4TQENAQQEBiBgagAAADAPBgoqhkiG+E0BDQEFCgEBMB4GCiqGSIb4TQEN\nAQYEEABfaRGZkBoPH0P0yzB1FCgwRAYKKoZIhvhNAQ0BBzA2MBAGCyqGSIb4TQENAQcBAQH/MBAG\nCyqGSIb4TQENAQcCAQEAMBAGCyqGSIb4TQENAQcDAQH/MAoGCCqGSM49BAMCA0cAMEQCIGJZIPqf\nVL5e2vCYD1DGYKjufru6iXKJoAdDyOQTXgdIAiBfHkTCZLMoVjLGnDLNKiZ5TSp6ceNYSksLfVcF\nQU6p7g==\n-----END CERTIFICATE-----"
						}
					]
				}
			],
			"description": "We can now retrieve the Platform Certification Key (PCK) Certificate for the current raw TCB level of SGX enabled platform from the SGX Caching Service (SCS).",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Verify Quote",
			"item": [
				{
					"name": "quoteVerify",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{bearerTokenKbs}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quote\": \"<string>\",\n    \"userData\": \"<optional>\"\n}"
						},
						"url": {
							"raw": "https://{{sqvs}}:{{sqvsPort}}/svs/v1/sgx_qv_verify_quote",
							"protocol": "https",
							"host": [
								"{{sqvs}}"
							],
							"port": "{{sqvsPort}}",
							"path": [
								"svs",
								"v1",
								"sgx_qv_verify_quote"
							]
						},
						"description": "Verifies the quote provided in the request body by checking whether the quote is ECDSA. Quote verifier requests SGX Quote Verification Service (SQVS) to verify a quote. SQVS parses the quote, verifies all the parameters in the quote and returns the response."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{bearerTokenKbs}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"quote\": \"AwACAAAAAAAFAAoAk5pyM/ecTKmUCg2zlX8GByMqADFimUjvNnla5ELEz5AAAAAAAgIAAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAADnAAAAAAAAAMEUXU9fPsSXu9VcnFDf+o0OOlDKxxXq1A9B47TK5HugAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUEqTwfvg4kqWRX7KrWEvjHhhuWk+Vq19pUP1OuGlNewAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2BAAAMcpaIKGq3SkXNzLrRhqjAmdIj2kNCRXwhTWgcTx+xhJew2QQHxw8AkfKwx3mloCnU6sspA8elDHqofy5AQozwcSs0GGQsADhMYYjuG0Ex3Uyylqp8MA+MJujMJfWWOhRitQe/PPdtONXpbTLPohfxB0SR7JG04DzVYXJlvVLN9dAgIAAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAADnAAAAAAAAAGDYWvKL6NHECgjZiwCdX4rME4Sjhc9GCADkeHkdGpecAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC+QaxkHLkZmIYLtuxD6wi2Ejwml2sYwklUVVn0ilgz2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfCvbOVDHdLksINRQVMr2O4w2DH4EaEyaJCr3HTDLQUmyGSTENR6VBAnJAHXNTuxsIEfCP8jM0RPeD2gtIABhcyAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FAHAOAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRTlqQ0NCSnVnQXdJQkFnSVZBTW5hTlU0VXNxc0xQNFQ4MXhHNVY4d0xCVlJ6TUFvR0NDcUdTTTQ5QkFNQ01IQXhJakFnQmdOVgpCQU1NR1VsdWRHVnNJRk5IV0NCUVEwc2dVR3hoZEdadmNtMGdRMEV4R2pBWUJnTlZCQW9NRVVsdWRHVnNJRU52Y25CdmNtRjBhVzl1Ck1SUXdFZ1lEVlFRSERBdFRZVzUwWVNCRGJHRnlZVEVMTUFrR0ExVUVDQXdDUTBFeEN6QUpCZ05WQkFZVEFsVlRNQjRYRFRJd01USXgKTmpBNE1EY3lNMW9YRFRJM01USXhOakE0TURjeU0xb3djREVpTUNBR0ExVUVBd3daU1c1MFpXd2dVMGRZSUZCRFN5QkRaWEowYVdacApZMkYwWlRFYU1CZ0dBMVVFQ2d3UlNXNTBaV3dnUTI5eWNHOXlZWFJwYjI0eEZEQVNCZ05WQkFjTUMxTmhiblJoSUVOc1lYSmhNUXN3CkNRWURWUVFJREFKRFFURUxNQWtHQTFVRUJoTUNWVk13V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVNnR3pJL2o5VXEKYk9hRGJnSHF2V0J3ZW80ZEhPS0M4dmRBMWh3d3BpU2hhbVJqbU9ObDdYUGtLeGptT1h1NXlHb3U5S1J5cExTVSs1RURvQm4xbm9QVwpvNElERURDQ0F3d3dId1lEVlIwakJCZ3dGb0FVV1NQVHAwcW9ZMVF1T1hDdDRBOEhLMWNrS3Jjd2J3WURWUjBmQkdnd1pqQmtvR0tnCllJWmVhSFIwY0hNNkx5OXpZbmd1WVhCcExuUnlkWE4wWldSelpYSjJhV05sY3k1cGJuUmxiQzVqYjIwdmMyZDRMMk5sY25ScFptbGoKWVhScGIyNHZkak12Y0dOclkzSnNQMk5oUFhCc1lYUm1iM0p0Sm1WdVkyOWthVzVuUFdSbGNqQWRCZ05WSFE0RUZnUVVlTkVoWXoycQplays1SjdwY3oxMjNDNHV4MzRjd0RnWURWUjBQQVFIL0JBUURBZ2JBTUF3R0ExVWRFd0VCL3dRQ01BQXdnZ0k1QmdrcWhraUcrRTBCCkRRRUVnZ0lxTUlJQ0pqQWVCZ29xaGtpRytFMEJEUUVCQkJBY2RIcXJkZ0tIQlVWRUZvajVnancrTUlJQll3WUtLb1pJaHZoTkFRMEIKQWpDQ0FWTXdFQVlMS29aSWh2aE5BUTBCQWdFQ0FRSXdFQVlMS29aSWh2aE5BUTBCQWdJQ0FRSXdFQVlMS29aSWh2aE5BUTBCQWdNQwpBUUF3RUFZTEtvWklodmhOQVEwQkFnUUNBUUF3RUFZTEtvWklodmhOQVEwQkFnVUNBUUF3RUFZTEtvWklodmhOQVEwQkFnWUNBUUF3CkVBWUxLb1pJaHZoTkFRMEJBZ2NDQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ2dDQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ2tDQVFBd0VBWUwKS29aSWh2aE5BUTBCQWdvQ0FRQXdFQVlMS29aSWh2aE5BUTBCQWdzQ0FRQXdFQVlMS29aSWh2aE5BUTBCQWd3Q0FRQXdFQVlMS29aSQpodmhOQVEwQkFnMENBUUF3RUFZTEtvWklodmhOQVEwQkFnNENBUUF3RUFZTEtvWklodmhOQVEwQkFnOENBUUF3RUFZTEtvWklodmhOCkFRMEJBaEFDQVFBd0VBWUxLb1pJaHZoTkFRMEJBaEVDQVFvd0h3WUxLb1pJaHZoTkFRMEJBaElFRUFJQ0FBQUFBQUFBQUFBQUFBQUEKQUFBd0VBWUtLb1pJaHZoTkFRMEJBd1FDQUFBd0ZBWUtLb1pJaHZoTkFRMEJCQVFHSUdCcUFBQUFNQThHQ2lxR1NJYjRUUUVOQVFVSwpBUUV3SGdZS0tvWklodmhOQVEwQkJnUVFrZkNIaG5mR3pranVDZ1AyaG1Mem16QkVCZ29xaGtpRytFMEJEUUVITURZd0VBWUxLb1pJCmh2aE5BUTBCQndFQkFmOHdFQVlMS29aSWh2aE5BUTBCQndJQkFRQXdFQVlMS29aSWh2aE5BUTBCQndNQkFmOHdDZ1lJS29aSXpqMEUKQXdJRFNRQXdSZ0loQUtMRWxXVEMwRzd2cmM5cGhvR01BWWRMSFl5N244YksxMjZWTWw5TG9CUmZBaUVBbWNUMXRvNWpHNVBSSW5hMApTZUZVdlIrVXFHVG5LaSthM2lkVTYraEFRL0U9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0tLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ21qQ0NBa0NnQXdJQkFnSVVXU1BUcDBxb1kxUXVPWEN0NEE4SEsxY2tLcmN3Q2dZSUtvWkl6ajBFQXdJdwphREVhTUJnR0ExVUVBd3dSU1c1MFpXd2dVMGRZSUZKdmIzUWdRMEV4R2pBWUJnTlZCQW9NRVVsdWRHVnNJRU52CmNuQnZjbUYwYVc5dU1SUXdFZ1lEVlFRSERBdFRZVzUwWVNCRGJHRnlZVEVMTUFrR0ExVUVDQXdDUTBFeEN6QUoKQmdOVkJBWVRBbFZUTUI0WERURTVNVEF6TVRFeU16TTBOMW9YRFRNME1UQXpNVEV5TXpNME4xb3djREVpTUNBRwpBMVVFQXd3WlNXNTBaV3dnVTBkWUlGQkRTeUJRYkdGMFptOXliU0JEUVRFYU1CZ0dBMVVFQ2d3UlNXNTBaV3dnClEyOXljRzl5WVhScGIyNHhGREFTQmdOVkJBY01DMU5oYm5SaElFTnNZWEpoTVFzd0NRWURWUVFJREFKRFFURUwKTUFrR0ExVUVCaE1DVlZNd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFRd3ArTGMrVFVCdGcxSAorVThKSXNNc2JqSGpDa1R0WGI4alBNNnIyZGh1OXpJYmxoRFo3SU5mcXQzSXg4WGNGS0Q4azBORVhya1o2NnFKClhhMUt6TElLbzRHL01JRzhNQjhHQTFVZEl3UVlNQmFBRk9ub1JGSlRObHhMR0pvUi9FTVlMS1hjSUlCSU1GWUcKQTFVZEh3UlBNRTB3UzZCSm9FZUdSV2gwZEhCek9pOHZjMko0TFdObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWawpjMlZ5ZG1salpYTXVhVzUwWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVCldTUFRwMHFvWTFRdU9YQ3Q0QThISzFja0tyY3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUkKTUFZQkFmOENBUUF3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQUoxcStGVHorZ1V1VmZCUXVDZ0pzRnJMMlRUUwplMWFCWjUzTzUyVGpGaWU2QWlBcmlQYVJhaFVYOU9hOWtHTGxBY2hXWEtUNmo0UldTUjUwQnFock4zVVQ0QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNsRENDQWptZ0F3SUJBZ0lWQU9ub1JGSlRObHhMR0pvUi9FTVlMS1hjSUlCSU1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T1RFd016RXdPVFE1TWpGYUZ3MDBPVEV5TXpFeU16VTVOVGxhTUdneEdqQVkKQmdOVkJBTU1FVWx1ZEdWc0lGTkhXQ0JTYjI5MElFTkJNUm93R0FZRFZRUUtEQkZKYm5SbGJDQkRiM0p3YjNKaApkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CTVFzd0NRWURWUVFHCkV3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCRS82RC8xV0hOcld3UG1OTUl5QktNVzUKSjZKek1zam82eFAydmtLMWNkWkdiMVBHUlAvQy84RUNnaURrbWtsbXp3THpMaSswMDBtN0xMcnRLSkEzb0MyagpnYjh3Z2J3d0h3WURWUjBqQkJnd0ZvQVU2ZWhFVWxNMlhFc1ltaEg4UXhnc3Bkd2dnRWd3VmdZRFZSMGZCRTh3ClRUQkxvRW1nUjRaRmFIUjBjSE02THk5elluZ3RZMlZ5ZEdsbWFXTmhkR1Z6TG5SeWRYTjBaV1J6WlhKMmFXTmwKY3k1cGJuUmxiQzVqYjIwdlNXNTBaV3hUUjFoU2IyOTBRMEV1WkdWeU1CMEdBMVVkRGdRV0JCVHA2RVJTVXpaYwpTeGlhRWZ4REdDeWwzQ0NBU0RBT0JnTlZIUThCQWY4RUJBTUNBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCCkFUQUtCZ2dxaGtqT1BRUURBZ05KQURCR0FpRUF6dzl6ZFVpVUhQTVVkMEM0bXg0MWpsRlprck0zeTVmMWxnblYKTzdGYmpPb0NJUUNvR3RVbVQ0Y1h0N1YreVNIYko4SG9iOUFhbnB2WE5IMUVSKy9nWkYrb3BRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{sqvs}}:{{sqvsPort}}/svs/v1/sgx_qv_verify_quote",
									"protocol": "https",
									"host": [
										"{{sqvs}}"
									],
									"port": "{{sqvsPort}}",
									"path": [
										"svs",
										"v1",
										"sgx_qv_verify_quote"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Dec 2020 10:00:33 GMT"
								},
								{
									"key": "Content-Length",
									"value": "567"
								}
							],
							"cookie": [],
							"body": "{\n    \"Message\": \"SGX_QL_QV_RESULT_OK\",\n    \"reportData\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n    \"EnclaveIssuer\": \"d412a4f07ef83892a5915fb2ab584be31e186e5a4f95ab5f6950fd4eb8694d7b\",\n    \"EnclaveMeasurement\": \"c1145d4f5f3ec497bbd55c9c50dffa8d0e3a50cac715ead40f41e3b4cae47ba0\",\n    \"EnclaveIssuerProdID\": \"00\",\n    \"EnclaveIssuerExtProdID\": \"00000000000000000000000000000000\",\n    \"ConfigSvn\": \"00\",\n    \"IsvSvn\": \"00\",\n    \"ConfigId\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"TcbLevel\": \"OutOfDate\"\n}"
						}
					]
				}
			],
			"description": "SGX Quote Verification service (SQVS) resource is used to verify the quote provided by the Quote verifier.\r\nSQVS checks whether the quote signature and PCK Certificate are valid, checks other parameters in the quote and returns the verification result.\r\n\r\nSQVS contacts SGX Caching service (SCS) to make sure that PCKCRL, TCBInfo, and QEIdentity in the quote are correct.\r\nSQVS listening port is user-configurable.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}