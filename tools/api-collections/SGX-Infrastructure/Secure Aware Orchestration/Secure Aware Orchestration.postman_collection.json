{
	"info": {
		"_postman_id": "cc2e32d0-16be-4745-a083-89f215260191",
		"name": "Secure Aware Orchestration",
		"description": "The TEE Attestation infrastructure provides an end to end support for registering SGX/TDX enabled hosts and provisioning them with SGX material (PCK certificates) and SGX/TDX collateral (security patches information - TCB Information - and Certificate Revocation Lists - CRLs).\n\nThe TEE Attestation infrastructure also provides support for generating SGX quotes for SGX enclaves hosted by workloads and verifying them by a remote attesting application. The remote attesting application can also use the TEE Attestation infrastructure to enforce enclave policies (like requiring a specific enclave signer).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Verify Services",
			"item": [
				{
					"name": "cmsVersion",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{cms}}:{{cmsPort}}/cms/v1/version",
							"protocol": "https",
							"host": [
								"{{cms}}"
							],
							"port": "{{cmsPort}}",
							"path": [
								"cms",
								"v1",
								"version"
							]
						},
						"description": "GetVersion is used to get the version of the application.\nReturns - The version of the application.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{cms}}:{{cmsPort}}/cms/v1/version",
									"protocol": "https",
									"host": [
										"{{cms}}"
									],
									"port": "{{cmsPort}}",
									"path": [
										"cms",
										"v1",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Dec 2021 07:20:38 GMT"
								},
								{
									"key": "Content-Length",
									"value": "107"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Service Name: Certificate Management Service\nVersion: v5.0.0-6d8812ac\nBuild Date: 2021-11-19T05:21:57+0000\n"
						}
					]
				},
				{
					"name": "aasVersion",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{aas}}:{{aasPort}}/aas/v1/version",
							"protocol": "https",
							"host": [
								"{{aas}}"
							],
							"port": "{{aasPort}}",
							"path": [
								"aas",
								"v1",
								"version"
							]
						},
						"description": "GetVersion is used to get the version of the application.\nReturns - The version of the application.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{aas}}:{{aasPort}}/aas/v1/version",
									"protocol": "https",
									"host": [
										"{{aas}}"
									],
									"port": "{{aasPort}}",
									"path": [
										"aas",
										"v1",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Dec 2021 07:20:56 GMT"
								},
								{
									"key": "Content-Length",
									"value": "117"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Service Name: Authentication and Authorization Service\nVersion: v5.0.0-6d8812ac\nBuild Date: 2021-11-19T05:21:26+0000\n"
						}
					]
				},
				{
					"name": "fdsVersion",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{fds}}:{{fdsPort}}/fds/v1/version",
							"protocol": "https",
							"host": [
								"{{fds}}"
							],
							"port": "{{fdsPort}}",
							"path": [
								"fds",
								"v1",
								"version"
							]
						},
						"description": "GetVersion is used to get the version of the application.\nReturns - The version of the application.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{fds}}:{{fdsPort}}/fds/v1/version",
									"protocol": "https",
									"host": [
										"{{fds}}"
									],
									"port": "{{fdsPort}}",
									"path": [
										"fds",
										"v1",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Fri, 03 Dec 2021 11:39:01 GMT"
								},
								{
									"key": "Content-Length",
									"value": "101"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Service Name: Feature Discovery Service\nVersion: v5.0.0-9318b18\nBuild Date: 2021-11-18T07:04:06+0000\n"
						}
					]
				}
			],
			"description": "The command line option can be used to confirm that the services are up and running before proceeding to the actual use case demonstration.\n\nVerify Feature Discovery Agent:\n\n```\nfda status\n\n```\n\nVerify Integration Hub (IHUB):\n\n```\nihub status\n\n```",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authorization",
			"item": [
				{
					"name": "createCccAdminToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenCccAdmin\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{cccAdminUser}}\",\n    \"password\": \"{{cccAdminUserPass}}\"\n}"
						},
						"url": {
							"raw": "https://{{aas}}:{{aasPort}}/aas/v1/token",
							"protocol": "https",
							"host": [
								"{{aas}}"
							],
							"port": "{{aasPort}}",
							"path": [
								"aas",
								"v1",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is not required when requesting token for Authservice registered users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{cccAdminUser}}\",\n    \"password\": \"{{cccAdminUserPass}}\"\n}"
								},
								"url": {
									"raw": "https://{{aas}}:{{aasPort}}/aas/v1/token",
									"protocol": "https",
									"host": [
										"{{aas}}"
									],
									"port": "{{aasPort}}",
									"path": [
										"aas",
										"v1",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Dec 2021 11:47:03 GMT"
								},
								{
									"key": "Content-Length",
									"value": "906"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjhiNzEyYTJlZmM3OTQxZjk4NjFiOTJmZDI2NmM1NThkMjM1OTBiOTkiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IkFBUyIsIm5hbWUiOiJDdXN0b21DbGFpbXNDcmVhdG9yIn1dLCJwZXJtaXNzaW9ucyI6W3sic2VydmljZSI6IkFBUyIsInJ1bGVzIjpbImN1c3RvbV9jbGFpbXM6Y3JlYXRlIl19XSwiZXhwIjoxNjM5NjYyNDIzLCJpYXQiOjE2Mzk2NTUxOTMsImlzcyI6IkFBUyBKV1QgSXNzdWVyIiwibmJmIjoxNjM5NjU1MTkzLCJzdWIiOiJjY2NfYWRtaW4ifQ.Oe4jiW7sZVIA8uZSlp4unxnX3jzUTULmk2L5LpF2d-gYkf8jku6xEc_svY6Yy0lBwJRZvQEvE6zFLJZPipuQF1g188PDvS3wkTX1bkFOtfSDK8u2dc2hXQND44V3LG-N8p2jweLpMFSzjil4eTdW04K0W2cnAUiMAxxdroUFFcqvfCGjfvHn1SOosC06wPrjxImQ3DV66DVInVUeI5FD2SxgituV3TiJAvSh1M856JWqhXzNXRdTn7wBpUdNI1uXZeW_cwX5y0wqfmFbGCGCJdr6umP9JGYcvfdwmrOB373hpeSUF4anmwt6pKih1y9HzKJWwXNXYJdz0Plz8-ZSLuXbPZ8FMek58Kp4Oft-F9YP0g4X474wRpWY68ygx50gy5qlGwY0CucELpvU5dj9Z6Y59azz9p0brHFi_JpcullwfgkDOizv7dSVvuWDjs98U2_U409Wkd9OULnY5iZs7qWyYB4wo-YQFpDpF1PGxrYO3QrF6mp7brLvjhpZAD4H"
						}
					]
				},
				{
					"name": "createGlobalAdminToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenGlobalAdminUser\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{globaladminUser}}\",\r\n    \"password\": \"{{globaladminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{aas}}:{{aasPort}}/aas/v1/token",
							"protocol": "https",
							"host": [
								"{{aas}}"
							],
							"port": "{{aasPort}}",
							"path": [
								"aas",
								"v1",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is not required when requesting token for Authservice admin user. Authservice admin user bearer token should be provided in Authorization header when requesting bearer token for other users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{globaladminUser}}\",\r\n    \"password\": \"{{globaladminPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aas}}:{{aasPort}}/aas/v1/token",
									"protocol": "https",
									"host": [
										"{{aas}}"
									],
									"port": "{{aasPort}}",
									"path": [
										"aas",
										"v1",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Dec 2021 11:47:38 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1402"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjhiNzEyYTJlZmM3OTQxZjk4NjFiOTJmZDI2NmM1NThkMjM1OTBiOTkiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IkFBUyIsIm5hbWUiOiJBZG1pbmlzdHJhdG9yIn0seyJzZXJ2aWNlIjoiRkRTIiwibmFtZSI6IkFkbWluaXN0cmF0b3IifSx7InNlcnZpY2UiOiJLQlMiLCJuYW1lIjoiQWRtaW5pc3RyYXRvciJ9LHsic2VydmljZSI6IkFQUyIsIm5hbWUiOiJBZG1pbmlzdHJhdG9yIn0seyJzZXJ2aWNlIjoiUVZTIiwibmFtZSI6IkFkbWluaXN0cmF0b3IifSx7InNlcnZpY2UiOiJUQ1MiLCJuYW1lIjoiQWRtaW5pc3RyYXRvciJ9XSwicGVybWlzc2lvbnMiOlt7InNlcnZpY2UiOiJBQVMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJBUFMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJGRFMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJLQlMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJRVlMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJUQ1MiLCJydWxlcyI6WyIqOio6KiJdfV0sImV4cCI6MTYzOTY2MjQ1OCwiaWF0IjoxNjM5NjU1MjI4LCJpc3MiOiJBQVMgSldUIElzc3VlciIsIm5iZiI6MTYzOTY1NTIyOCwic3ViIjoiZ2xvYmFsX2FkbWluX3VzZXIifQ.ddnRocqmdeIm8wLocYIi8eOOx0hVcTd-nhfkEMJKe_IES8utvVH63FAwVTWPe9amxxGTW-1HM12Rhyxvw2nB78mn8BbPBmFylYPWPVTrrC3Ru-0Q3Br6T0H_PRM4T3Y6OavNQIN1vu2ezaYwU45X2wS2sObZPQLUvbpN99YPqc7QVySb28bRmVdqrOFO6wirxqnSM4DiRZ78ZiZCmw1qm0d6FqPB_wxzMaNVxZDvedyhoZZr7E-lxrJ396NkDRizIqhnxhZa1RjCduvlDG7rbCOXkNAK1xaA3_xjNYqkY6fLmIgcYdkEK7gcvlEjJcahXXZAH_UBUbDrQ889FeO-FweVUp5KJcOxs2DM9z-Yr5x8yY_Z5W4NcL7mbgJ5H6mnRw8dUNsalhS217qbQWQ4wqXhOzjl7-nKT_47sEE31Us7IUfLIt-Ch79q1bYHY5_O88PDYsvNr-rs3ej7T6_2ARM5SX08kDlC4vaZ8NXgDtQIs7NDj_kBqxR6i3ncnLoS"
						}
					]
				},
				{
					"name": "createFDagentLongLivedToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenFDagentLongLived\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenGlobalAdminUser}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/jwt",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"{{hostHardwareUuid}}\",\n    \"validity_seconds\": 86400,\n    \"claims\": {\n        \"permissions\": [\n            {\n                \"rules\": [\n                    \"platforms:push:*\",\n                    \"tcb_status:retrieve:*\"\n                ],\n                \"service\": \"TCS\"\n            },\n            {\n                \"rules\": [\n                    \"hosts:create:*\"\n                ],\n                \"service\": \"FDS\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://{{aas}}:{{aasPort}}/aas/v1/custom-claims-token",
							"protocol": "https",
							"host": [
								"{{aas}}"
							],
							"port": "{{aasPort}}",
							"path": [
								"aas",
								"v1",
								"custom-claims-token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is required when requesting custom claims token from Authservice."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenGlobalAdminUser}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subject\": \"{{hostHardwareUuid}}\",\n    \"validity_seconds\": 86400,\n    \"claims\": {\n        \"permissions\": [\n            {\n                \"rules\": [\n                    \"platforms:push:*\",\n                    \"tcb_status:retrieve:*\"\n                ],\n                \"service\": \"TCS\"\n            },\n            {\n                \"rules\": [\n                    \"hosts:create:*\"\n                ],\n                \"service\": \"FDS\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aas}}:{{aasPort}}/aas/v1/custom-claims-token",
									"protocol": "https",
									"host": [
										"{{aas}}"
									],
									"port": "{{aasPort}}",
									"path": [
										"aas",
										"v1",
										"custom-claims-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Dec 2021 11:48:25 GMT"
								},
								{
									"key": "Content-Length",
									"value": "952"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjhiNzEyYTJlZmM3OTQxZjk4NjFiOTJmZDI2NmM1NThkMjM1OTBiOTkiLCJ0eXAiOiJKV1QifQ.eyJwZXJtaXNzaW9ucyI6W3sicnVsZXMiOlsicGxhdGZvcm1zOnB1c2g6KiIsInRjYl9zdGF0dXM6cmV0cmlldmU6KiJdLCJzZXJ2aWNlIjoiVENTIn0seyJydWxlcyI6WyJob3N0czpjcmVhdGU6KiJdLCJzZXJ2aWNlIjoiRkRTIn1dLCJleHAiOjE2Mzk3NDE3MDUsImlhdCI6MTYzOTY1NTI3NSwiaXNzIjoiQUFTIEpXVCBJc3N1ZXIiLCJuYmYiOjE2Mzk2NTUyNzUsInN1YiI6Ijg4ODg4ODg4LTg4ODctMTMxNS0wYjA4LTMzMDlhNWE1YTVhNSJ9.BY61NB0zKJxugkU0dT2su7hT5LNeWy4Dv9BFirUZGrKSU-dPzrtkwilp11OzSxE8vNjREv-hz9rm7Qd7z9qHgskXKFKbnqp5PGhnRElxkUXhfLgLpJ-b8C7ENioNGywLeJmmyZySplElLI6pSNu-0BSznPw4L0ayCuyZqkG8dr0AHm4DtL96ApBuE5ArtpJIkRhGETaMxr4y-gNViKhC_AWNHdeSCwYh8NEaMW7qwBDjcyngjEOWUVzTNaYBnHZc0zEzNCAKGkPM8ipW3ZjKkrCLHJ4b5lWm0soPngl5DSAjqwiVDJt0MZg_iWuPN4tCs4UJPsE6HVQysL0I0NyqEgp76tjoiKLOl2pePXxHl3EOvphdDKu2bLT00Q8GiCuGOi_C9oCpJw_MQU8qD66Rn5PhNfya8TO3LJj4gvrk3Km9Pd_qVnnrwDT56AjEJi7XzSvcMfouJilZpYTLPGbCC4YSt-1lgYXPDrnl6nZvs3GPV-EMwEBnsDhz__txJ2V4"
						}
					]
				}
			],
			"description": "To make an API request to an Intel® SecL-DC service, an authentication token is now required. API requests must now include an Authorization header with an appropriate token:\n\n```\nAuthorization: Bearer <token>\n```\n\nThe token is issued by the AAS and will expire after a set amount of time. This token may be used with any Intel® SecL-DC service, and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for."
		},
		{
			"name": "Push Host Information to FDS",
			"item": [
				{
					"name": "pushHostInfo",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenFDagentLongLived}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"host_info\": {\n        \"hardware_features\": {\n            \"SGX\": {\n                \"enabled\": {{sgxEnabled}},\n                \"meta\": {\n                    \"epc_offset\": \"{{epcOffset}}\",\n                    \"epc_size\": \"{{epcSize}}\",\n                    \"flc_enabled\": {{flcEnabled}},\n                    \"integrity_enabled\": false,\n                    \"tcb_upto_date\": \"{{tcbStatus}}\"\n                }\n            }\n        },\n        \"hardware_uuid\": \"{{hostHardwareUuid}}\"\n    },\n    \"host_name\": \"{{agentHostName}}\"\n}"
						},
						"url": {
							"raw": "https://{{fds}}:{{fdsPort}}/fds/v1/hosts",
							"protocol": "https",
							"host": [
								"{{fds}}"
							],
							"port": "{{fdsPort}}",
							"path": [
								"fds",
								"v1",
								"hosts"
							]
						},
						"description": "Creates a host.  \nThe serialized HostCreateRequest Go struct object represents the content of the request body.\n\n| Attribute | Description |\n| --- | --- |\n| host_name | Name for the host to be registered. |\n| host_info | The host info object. |"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenFDagentLongLived}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host_info\": {\n        \"hardware_features\": {\n            \"SGX\": {\n                \"enabled\": {{sgxEnabled}},\n                \"meta\": {\n                    \"epc_offset\": \"{{epcOffset}}\",\n                    \"epc_size\": \"{{epcSize}}\",\n                    \"flc_enabled\": {{flcEnabled}},\n                    \"integrity_enabled\": false,\n                    \"tcb_upto_date\": \"{{tcbStatus}}\"\n                }\n            }\n        },\n        \"hardware_uuid\": \"{{hostHardwareUuid}}\"\n    },\n    \"host_name\": \"{{agentHostName}}\"\n}"
								},
								"url": {
									"raw": "https://{{fds}}:{{fdsPort}}/fds/v1/hosts",
									"protocol": "https",
									"host": [
										"{{fds}}"
									],
									"port": "{{fdsPort}}",
									"path": [
										"fds",
										"v1",
										"hosts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Thu, 23 Dec 2021 12:51:27 GMT"
								},
								{
									"key": "Content-Length",
									"value": "378"
								}
							],
							"cookie": [],
							"body": "{\n    \"host_id\": \"8570d3a0-a789-4667-9470-b09c35cb26db\",\n    \"host_name\": \"wlr21s05\",\n    \"host_info\": {\n        \"hardware_uuid\": \"88888888-8887-1315-0b08-3309a5a5a5a5\",\n        \"hardware_features\": {\n            \"SGX\": {\n                \"enabled\": true,\n                \"meta\": {\n                    \"integrity_enabled\": false,\n                    \"flc_enabled\": true,\n                    \"epc_offset\": \"0x00c00000\",\n                    \"epc_size\": \"2.0 GB\",\n                    \"tcb_upto_date\": \"false\"\n                }\n            }\n        }\n    },\n    \"status\": \"active\",\n    \"valid_to\": \"2021-12-23T04:51:27.46904856-08:00\"\n}"
						}
					]
				}
			],
			"description": "Host Registration creates a host record with host information in the Feature Discovery Service (FDS)database when FD Agent update SGX enablement information for the first time.\n\nIf FDS URL is configured, then FD Agent fetches the TCB Status from TCS and updates FDS with SGX platform enablement information and TCB status periodically. The platform information is made available to Kubernetes via the SGX Hub (IHUB), which pulls it from FDS.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Integration with Orchestrator ",
			"item": [
				{
					"name": "Configure Kubernetes Pods to Require Matching Attributes",
					"item": [],
					"description": "Verify that the worker nodes have had their SGX platform data attributes populated: \n\n```kubectl get nodes --show-labels```\n\nThe output should show the SGX-Enabled and any other platform information applied to all of the registered Worker Nodes.\n\nNow create a pod_config.yaml (say for nginx container) containing the matchExpression policy\nrequirements in root directory on master node.\n\n```yaml\nkind: Pod   \n  metadata:     \n  name: nginx       \n  labels:         \n    name: nginx    \nspec:   \n  affinity:     \n    nodeAffinity:       \n      requiredDuringSchedulingIgnoredDuringExecution:         \n        nodeSelectorTerms:           \n          - matchExpressions:                \n\t         - key: SGX-Enabled                \n\t           operator: In                 \n\t\t       values:                    \n\t\t         - \"true\"\n  containers:       \n    - name: nginx         \n      image: nginx           \n\t  ports:    \n        - containerPort: 80\n```\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Launching a Kubernetes Pod on a Compliant Worker Node",
					"item": [],
					"description": "Below is a sample command for the Kubernetes Master to launch a Pod:\r\n\r\n```kubectl create -f pod_config.yaml```\r\n\r\nWe can verify that the Master Node CRDs contain attributes successfully pushed from the Integration Hub:\r\n\r\n```kubectl get crds kubectl get -o json hostattributes.isecl.intel.com```\r\n\r\nWe can list the Worker Nodes and their labels:\r\n\r\n```kubectl get nodes --show-labels```\r\n\r\nFinally, we can list the running Pods to confirm that the Pod launched and is running on a compliant Worker Node:\r\n\r\n```kubectl get pods```",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "hostInfo",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenGlobalAdminUser}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{fds}}:{{fdsPort}}/fds/v1/hosts",
							"protocol": "https",
							"host": [
								"{{fds}}"
							],
							"port": "{{fdsPort}}",
							"path": [
								"fds",
								"v1",
								"hosts"
							]
						},
						"description": "Searches for hosts.\nReturns - The serialized HostCollection Go struct object that was retrieved, which is a collection of serialized Host Go struct objects.  \nA valid bearer token is required to authorize this REST call."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenGlobalAdminUser}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{fds}}:{{fdsPort}}/fds/v1/hosts",
									"protocol": "https",
									"host": [
										"{{fds}}"
									],
									"port": "{{fdsPort}}",
									"path": [
										"fds",
										"v1",
										"hosts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Dec 2021 10:03:08 GMT"
								},
								{
									"key": "Content-Length",
									"value": "354"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"host_id\": \"894e88c1-a4af-492c-9fe2-6e9324acaae6\",\n        \"host_name\": \"wlr21s05\",\n        \"host_info\": {\n            \"hardware_uuid\": \"88888888-8887-1315-0b08-3309a5a5a5a5\",\n            \"hardware_features\": {\n                \"SGX\": {\n                    \"enabled\": true,\n                    \"meta\": {\n                        \"integrity_enabled\": false,\n                        \"flc_enabled\": true,\n                        \"epc_size\": \"2.0 GB\",\n                        \"tcb_upto_date\": \"false\"\n                    }\n                }\n            }\n        },\n        \"status\": \"inactive\",\n        \"valid_to\": \"2021-12-22T01:43:34.388927-08:00\"\n    }\n]"
						}
					]
				}
			],
			"description": "The Integration Hub (IHUB) allows to support SGX in Kubernetes and Open stack. IHUB pulls the list of hosts details from Kubernetes and then using the host information it pulls the SGX Data from Feature Discovery Service and pushes it to Kubernetes. IHUB performs these steps on a regular basis so that the most recent SGX information about nodes is reflected in Kubernetes.\n\nThis integration allows Kubernetes and Openstack to schedule VMs and containers that need to run SGX workloads on compute nodes that support SGX. The SGX data that IHUB pushes to Kubernetes consists of SGX enabled/disabled, SGX supported/not supported, FLC enabled/not enabled, EPC memory size, TCB status up to date/not up to date and platform-data expiry time.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}