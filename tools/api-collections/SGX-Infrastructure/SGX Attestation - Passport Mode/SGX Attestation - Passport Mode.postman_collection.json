{
	"info": {
		"_postman_id": "efd7c9ae-80ba-4c16-9464-cdde76ce112f",
		"name": "SGX Attestation - Passport Mode",
		"description": "The TEE Attestation infrastructure provides an end to end support for registering SGX/TDX enabled hosts and provisioning them with SGX material (PCK certificates) and SGX/TDX collateral (security patches information - TCB Information - and Certificate Revocation Lists - CRLs).\n\nThe TEE Attestation infrastructure also provides support for generating SGX quotes for SGX enclaves hosted by workloads and verifying them by a remote attesting application. The remote attesting application can also use the TEE Attestation infrastructure to enforce enclave policies (like requiring a specific enclave signer).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Verify Services",
			"item": [
				{
					"name": "cmsVersion",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{cms}}:{{cmsPort}}/cms/v1/version",
							"protocol": "https",
							"host": [
								"{{cms}}"
							],
							"port": "{{cmsPort}}",
							"path": [
								"cms",
								"v1",
								"version"
							]
						},
						"description": "GetVersion is used to get the version of the application.\nReturns - The version of the application.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{cms}}:{{cmsPort}}/cms/v1/version",
									"protocol": "https",
									"host": [
										"{{cms}}"
									],
									"port": "{{cmsPort}}",
									"path": [
										"cms",
										"v1",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Dec 2021 05:45:46 GMT"
								},
								{
									"key": "Content-Length",
									"value": "107"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Service Name: Certificate Management Service\nVersion: v5.0.0-6d8812ac\nBuild Date: 2021-11-19T05:21:57+0000\n"
						}
					]
				},
				{
					"name": "aasVersion",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/version",
							"protocol": "https",
							"host": [
								"{{aasCsp}}"
							],
							"port": "{{aasPortCsp}}",
							"path": [
								"aas",
								"v1",
								"version"
							]
						},
						"description": "GetVersion is used to get the version of the application.\nReturns - The version of the application.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/version",
									"protocol": "https",
									"host": [
										"{{aasCsp}}"
									],
									"port": "{{aasPortCsp}}",
									"path": [
										"aas",
										"v1",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Dec 2021 05:46:02 GMT"
								},
								{
									"key": "Content-Length",
									"value": "117"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Service Name: Authentication and Authorization Service\nVersion: v5.0.0-6d8812ac\nBuild Date: 2021-11-19T05:21:26+0000\n"
						}
					]
				},
				{
					"name": "tcsVersion",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/version",
							"protocol": "https",
							"host": [
								"{{tcs}}"
							],
							"port": "{{tcsPort}}",
							"path": [
								"tcs",
								"v4",
								"sgx",
								"version"
							]
						},
						"description": "GetVersion is used to get the version of the application.\nReturns - The version of the application.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/version",
									"protocol": "https",
									"host": [
										"{{tcs}}"
									],
									"port": "{{tcsPort}}",
									"path": [
										"tcs",
										"v4",
										"sgx",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Fri, 03 Dec 2021 10:53:50 GMT"
								},
								{
									"key": "Content-Length",
									"value": "95"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Service Name: TEE Caching Service\nVersion: v5.0.0-9318b18\nBuild Date: 2021-11-22T06:43:12+0000\n"
						}
					]
				},
				{
					"name": "apsVersion",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{aps}}:{{apsPort}}/aps/v1/version",
							"protocol": "https",
							"host": [
								"{{aps}}"
							],
							"port": "{{apsPort}}",
							"path": [
								"aps",
								"v1",
								"version"
							]
						},
						"description": "GetVersion is used to get the version of the application.\nReturns - The version of the application.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{aps}}:{{apsPort}}/aps/v1/version",
									"protocol": "https",
									"host": [
										"{{aps}}"
									],
									"port": "{{apsPort}}",
									"path": [
										"aps",
										"v1",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Tue, 23 Nov 2021 11:10:52 GMT"
								},
								{
									"key": "Content-Length",
									"value": "102"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Service Name: Attestation Policy Service\nVersion: v5.0.0-9318b18\nBuild Date: 2021-11-22T06:43:12+0000\n"
						}
					]
				},
				{
					"name": "qvsVersion",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{qvs}}:{{qvsPort}}/qvs/v1/version",
							"protocol": "https",
							"host": [
								"{{qvs}}"
							],
							"port": "{{qvsPort}}",
							"path": [
								"qvs",
								"v1",
								"version"
							]
						},
						"description": "GetVersion is used to get the version of the application.\nReturns - The version of the application.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{qvs}}:{{qvsPort}}/qvs/v1/version",
									"protocol": "https",
									"host": [
										"{{qvs}}"
									],
									"port": "{{qvsPort}}",
									"path": [
										"qvs",
										"v1",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Fri, 03 Dec 2021 10:55:10 GMT"
								},
								{
									"key": "Content-Length",
									"value": "102"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Service Name: Quote Verification Service\nVersion: v5.0.0-9318b18\nBuild Date: 2021-11-23T08:26:33+0000\n"
						}
					]
				},
				{
					"name": "kbsVersion",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{kbs}}:{{kbsPort}}/kbs/v1/version",
							"protocol": "https",
							"host": [
								"{{kbs}}"
							],
							"port": "{{kbsPort}}",
							"path": [
								"kbs",
								"v1",
								"version"
							]
						},
						"description": "GetVersion is used to get the version of the application.\nReturns - The version of the application.\n"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{kbs}}:{{kbsPort}}/kbs/v1/version",
									"protocol": "https",
									"host": [
										"{{kbs}}"
									],
									"port": "{{kbsPort}}",
									"path": [
										"kbs",
										"v1",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Dec 2021 05:46:56 GMT"
								},
								{
									"key": "Content-Length",
									"value": "95"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Service Name: Key Broker Service\nVersion: v5.0.0-04f001d1\nBuild Date: 2021-11-22T06:37:22+0000\n"
						}
					]
				}
			],
			"description": "The command line option can be used to confirm that the service is up and running before proceeding to the actual use case demonstration.\n\nVerify Feature Discovery Agent:\n\n```\nfda status\n\n```",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authorization",
			"item": [
				{
					"name": "createCccAdminToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenCccAdmin\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{cccAdminUser}}\",\n    \"password\": \"{{cccAdminUserPass}}\"\n}"
						},
						"url": {
							"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/token",
							"protocol": "https",
							"host": [
								"{{aasCsp}}"
							],
							"port": "{{aasPortCsp}}",
							"path": [
								"aas",
								"v1",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is not required when requesting token for Authservice registered users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{cccAdminUser}}\",\n    \"password\": \"{{cccAdminUserPass}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/token",
									"protocol": "https",
									"host": [
										"{{aasCsp}}"
									],
									"port": "{{aasPortCsp}}",
									"path": [
										"aas",
										"v1",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Thu, 11 Mar 2021 06:46:51 GMT"
								},
								{
									"key": "Content-Length",
									"value": "883"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjUxNTcxYmZmYjdhNDY1NTIyNzZmNWVkZjU2NWJlZDdkZmU3ZTkzZTEiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IkFBUyIsIm5hbWUiOiJDdXN0b21DbGFpbXNDcmVhdG9yIn1dLCJwZXJtaXNzaW9ucyI6W3sic2VydmljZSI6IkFBUyIsInJ1bGVzIjpbImN1c3RvbV9jbGFpbXM6Y3JlYXRlIl19XSwiZXhwIjoxNjE1NDUyNDExLCJpYXQiOjE2MTU0NDUxODEsImlzcyI6IkFBUyBKV1QgSXNzdWVyIiwic3ViIjoiY3NwX2FkbWluIn0.clwnpJZpkD_zOFviJ741VCf1n-nz9ban5JrgyvUwxA82fiNZ1F1oP78tpBPOHxGmkCxH-tkAhuj-88JcsRbbEtMsefHCHXWtN0XCY-1KYkRWuEezYRZQfMkPYEp7k01r3CL35h-rpDNWBW89aIkcqSbD0rOZ422puK1GJmiPYOExXnR5GjwSWMtrzsErLtv0ubtiSbEMfNkL9BgSCd0bI2Bt8NgTVSKvwdL2zzXxcgyMBDun4rVLTYd3uZcNEOy0LD5XFGka_1rp4uuXeHEFEt6jbFS4fvIypPcTJ-M29NZXCyJ5Mz2EPOH2L-tWPGx0Tr2vihPF64f-zGlVAY2k69tYQMM2zk4sGlHkkjQ_zuAcDD3D9aAFPPPTrLKcWeSd7xceGzXH5ZJhU4xSMogAaZWAHJV2BZUJ-uBza9IL_p9NwBXfcNg2P5nqhKwBBstctTHm9vro5ASgXjh3zthwg2vPRxQdoTGdmNT92O_tLGx_0VoBK3S6hhMks4TL82Ud"
						}
					]
				},
				{
					"name": "createGlobalAdminTokenCsp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenGlobalAdminUserCsp\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{globaladminUser}}\",\r\n    \"password\": \"{{globaladminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/token",
							"protocol": "https",
							"host": [
								"{{aasCsp}}"
							],
							"port": "{{aasPortCsp}}",
							"path": [
								"aas",
								"v1",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is not required when requesting token for Authservice admin user. Authservice admin user bearer token should be provided in Authorization header when requesting bearer token for other users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{globaladminUser}}\",\r\n    \"password\": \"{{globaladminPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/token",
									"protocol": "https",
									"host": [
										"{{aasCsp}}"
									],
									"port": "{{aasPortCsp}}",
									"path": [
										"aas",
										"v1",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Wed, 19 Jan 2022 08:51:35 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1402"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjUzZTM3NWQzOGZiZmQ3MzQxM2U4YmI0N2Y0YjU5NjViMTJhZTM0OTkiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IkFBUyIsIm5hbWUiOiJBZG1pbmlzdHJhdG9yIn0seyJzZXJ2aWNlIjoiQVBTIiwibmFtZSI6IkFkbWluaXN0cmF0b3IifSx7InNlcnZpY2UiOiJGRFMiLCJuYW1lIjoiQWRtaW5pc3RyYXRvciJ9LHsic2VydmljZSI6IktCUyIsIm5hbWUiOiJBZG1pbmlzdHJhdG9yIn0seyJzZXJ2aWNlIjoiUVZTIiwibmFtZSI6IkFkbWluaXN0cmF0b3IifSx7InNlcnZpY2UiOiJUQ1MiLCJuYW1lIjoiQWRtaW5pc3RyYXRvciJ9XSwicGVybWlzc2lvbnMiOlt7InNlcnZpY2UiOiJBQVMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJBUFMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJGRFMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJLQlMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJRVlMiLCJydWxlcyI6WyIqOio6KiJdfSx7InNlcnZpY2UiOiJUQ1MiLCJydWxlcyI6WyIqOio6KiJdfV0sImV4cCI6MTY0MjU4OTQ5NSwiaWF0IjoxNjQyNTgyMjY1LCJpc3MiOiJBQVMgSldUIElzc3VlciIsIm5iZiI6MTY0MjU4MjI2NSwic3ViIjoiZ2xvYmFsX2FkbWluX3VzZXIifQ.xR7pxLQzmArLEUYBDL4mIk09AOFKjj0GWLsAJhby-fYiFjF57txpqywnYKJzMdNAj6pA-NvpFKcTup-Y4BsJyuKJFp-ZWmnUmqz_RCSfg-tkxTiJs0btMPvPkEn7R9pGWNVrvckaDR8nsiyOnhodvN5MzFzNn-jrKmAWFp7eEVMozNOY6ss5XhDwpE7T4TZYKf2-3qPIdqSSbmjS6mVkGOID6Pp469hGfmo_4B1L-QaqCCkU-_3crjuiroRQnyP2uqPh-vFBQxZcJi2hJeugKPb_7PsFTobdKwyc2myTkhIkhZiz8BzD02J3Izq003Z6MfZperHZKpAS1zsZq2NoLvU0SKY2WR9zYzqk1eVrZ-3V0PDT3046HUKWbwM51ZEbheIjgfRRoB76eN-Kxse9maWmgc3ANabgJFaGdT0KHgtD-RLr76TuvQoEUU-XxAOGTFy4CdZQOU4kbq1Xdvv3caYhYJXAqvorIG8afbg6WK2NTZqGYqgCwuAOa8gMgOKR"
						}
					]
				},
				{
					"name": "createGlobalAdminTokenEnt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenGlobalAdminUserEnt\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{globaladminUser}}\",\r\n    \"password\": \"{{globaladminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{aasEnt}}:{{aasPortEnt}}/aas/v1/token",
							"protocol": "https",
							"host": [
								"{{aasEnt}}"
							],
							"port": "{{aasPortEnt}}",
							"path": [
								"aas",
								"v1",
								"token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is not required when requesting token for Authservice admin user. Authservice admin user bearer token should be provided in Authorization header when requesting bearer token for other users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{globaladminUser}}\",\r\n    \"password\": \"{{globaladminPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aasEnt}}:{{aasPortEnt}}/aas/v1/token",
									"protocol": "https",
									"host": [
										"{{aasEnt}}"
									],
									"port": "{{aasPortEnt}}",
									"path": [
										"aas",
										"v1",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Wed, 19 Jan 2022 08:51:19 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1299"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6ImI2OTM5N2Q4ZDY4OGFjMTY4NzUxNDBkZTBiMjk4N2FmYzUzZTIzZGUiLCJ0eXAiOiJKV1QifQ.eyJyb2xlcyI6W3sic2VydmljZSI6IkFBUyIsIm5hbWUiOiJBZG1pbmlzdHJhdG9yIn0seyJzZXJ2aWNlIjoiS0JTIiwibmFtZSI6IkFkbWluaXN0cmF0b3IifSx7InNlcnZpY2UiOiJBUFMiLCJuYW1lIjoiQWRtaW5pc3RyYXRvciJ9LHsic2VydmljZSI6IlFWUyIsIm5hbWUiOiJBZG1pbmlzdHJhdG9yIn0seyJzZXJ2aWNlIjoiVENTIiwibmFtZSI6IkFkbWluaXN0cmF0b3IifV0sInBlcm1pc3Npb25zIjpbeyJzZXJ2aWNlIjoiQUFTIiwicnVsZXMiOlsiKjoqOioiXX0seyJzZXJ2aWNlIjoiQVBTIiwicnVsZXMiOlsiKjoqOioiXX0seyJzZXJ2aWNlIjoiS0JTIiwicnVsZXMiOlsiKjoqOioiXX0seyJzZXJ2aWNlIjoiUVZTIiwicnVsZXMiOlsiKjoqOioiXX0seyJzZXJ2aWNlIjoiVENTIiwicnVsZXMiOlsiKjoqOioiXX1dLCJleHAiOjE2NDI1ODk0NzksImlhdCI6MTY0MjU4MjI0OSwiaXNzIjoiQUFTIEpXVCBJc3N1ZXIiLCJuYmYiOjE2NDI1ODIyNDksInN1YiI6Imdsb2JhbF9hZG1pbl91c2VyIn0.JnNiDt3RQ9r8ZN_bth8qtd3ofsZ8AVZ0nHCYcLa9oh7VQlnX4j-7C61NuDil6OhVu8Vexg7nN2XjZ2_u1XRCd55vCnbT6PG5D1FcAzrdlQ_Siw9zL8rWbMNMDRaKCcmW-bg-TBK4ZDyXK62qdPrS67ggWpUAe6RBKHkG0ecLILonvlYZJYoBTGa4Zg8DhAptSvRMhWG2Q8--cMHkreGhlu5YGF8V9SmGtJ2m2z0HwLEsjIBGQ6x1E4Ba7Cij04StXpVTS85lFPN5ZVLYrubNi8vQI_lHAtLlkXeuJcPVqIX0WwUd3kM68OtbVwMMiiO6dPSKEkJ7y66WmZPlg_9oUJ96KFeDVWObuavxzE76_55cv0uHspaquD3-OXn3vsx89quELkOyPbUgWEGvKav9e_aUkfMs9Dc32P4xn41fthmLJnlx9u2WIjX3bGd_zaYcMjDmrOxSAC0Z3TSo6FF-dLX4yJZEkloy3jrMnpH7qocv_R9Pw_w9-buZPE9NjzRZ"
						}
					]
				},
				{
					"name": "createCustomClaimsTokenAps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenCustomClaimsAps\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subject\": \"kbs\",\r\n    \"validity_seconds\": 31536000,\r\n    \"claims\": {\r\n        \"permissions\": [\r\n            {\r\n                \"service\": \"APS\",\r\n                \"rules\": [\r\n                    \"attestation_token:create\"\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{aasEnt}}:{{aasPortEnt}}/aas/v1/custom-claims-token",
							"protocol": "https",
							"host": [
								"{{aasEnt}}"
							],
							"port": "{{aasPortEnt}}",
							"path": [
								"aas",
								"v1",
								"custom-claims-token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API  \nrequests. Bearer token Authorization is required when requesting custom claims token  \nfrom Authservice."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subject\": \"kbs\",\r\n    \"validity_seconds\": 31536000,\r\n    \"claims\": {\r\n        \"permissions\": [\r\n            {\r\n                \"service\": \"APS\",\r\n                \"rules\": [\r\n                    \"attestation_token:create\"\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aasEnt}}:{{aasPortEnt}}/aas/v1/custom-claims-token",
									"protocol": "https",
									"host": [
										"{{aasEnt}}"
									],
									"port": "{{aasPortEnt}}",
									"path": [
										"aas",
										"v1",
										"custom-claims-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Wed, 19 Jan 2022 08:46:36 GMT"
								},
								{
									"key": "Content-Length",
									"value": "827"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6ImI2OTM5N2Q4ZDY4OGFjMTY4NzUxNDBkZTBiMjk4N2FmYzUzZTIzZGUiLCJ0eXAiOiJKV1QifQ.eyJwZXJtaXNzaW9ucyI6W3sicnVsZXMiOlsiYXR0ZXN0YXRpb25fdG9rZW46Y3JlYXRlIl0sInNlcnZpY2UiOiJBUFMifV0sImV4cCI6MTY3NDExNzk5NiwiaWF0IjoxNjQyNTgxOTY2LCJpc3MiOiJBQVMgSldUIElzc3VlciIsIm5iZiI6MTY0MjU4MTk2Niwic3ViIjoia2JzIn0.P1rv2UgWYTYCFmdINBGEd4847hreA0ykAr5I7_nwQgdBmu6_AwTIgKwMTlS06ku1h2kS4jv-RqijopxmgZjg1Rj7S9-h9S8eanbNNoLmPpCRsrz6x9ctvEEtEHtAWlYeL7cxZ1kKVAoDw6VwNtRi116aD6FdwlMID9SliOsOlRt4waw324bnw2ssfbbKX3ynftHq0AZ1AJCq7C0zC7DveLKD0GQxCYqEWO96fXk13sfnP_CkiuKj4BzCMF-BKfshJ9YfjfiqKb32B0dVG7J8GE9srruneRaqMWAp-ucqwCSNTnlbQJQtbMV4q04CwJfJApfMaSUXvZmN93HJVEWKXwfbzfATxKfvprLeeWsxg_YGAPJfh9Zi6ed-i7lgqJd3WYDTYrkY7hQ5y5vR7QuBlFbFptrAp8vDk8tiyv04honSpUO7ZKa032jqi3Tbp_3sOkK4-EyJF6Aw3_d0VOuvUkBHT3vODa4lwTJ8c9JDaQHffwhqC6eTStxETACu13zV"
						}
					]
				},
				{
					"name": "createCustomClaimsTokenKbs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenCustomClaimsKbs\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subject\": \"sgx_user\",\r\n    \"validity_seconds\": 31536000,\r\n    \"claims\": {\r\n        \"permissions\": [\r\n            {\r\n                \"service\": \"KBS\",\r\n                \"context\": \"nginx\"\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{aasEnt}}:{{aasPortEnt}}/aas/v1/custom-claims-token",
							"protocol": "https",
							"host": [
								"{{aasEnt}}"
							],
							"port": "{{aasPortEnt}}",
							"path": [
								"aas",
								"v1",
								"custom-claims-token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is required when requesting custom claims token from Authservice."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subject\": \"sgx_user\",\r\n    \"validity_seconds\": 31536000,\r\n    \"claims\": {\r\n        \"permissions\": [\r\n            {\r\n                \"service\": \"KBS\",\r\n                \"context\": \"nginx\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{aasEnt}}:{{aasPortEnt}}/aas/v1/custom-claims-token",
									"protocol": "https",
									"host": [
										"{{aasEnt}}"
									],
									"port": "{{aasPortEnt}}",
									"path": [
										"aas",
										"v1",
										"custom-claims-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Wed, 19 Jan 2022 08:41:29 GMT"
								},
								{
									"key": "Content-Length",
									"value": "808"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6ImI2OTM5N2Q4ZDY4OGFjMTY4NzUxNDBkZTBiMjk4N2FmYzUzZTIzZGUiLCJ0eXAiOiJKV1QifQ.eyJwZXJtaXNzaW9ucyI6W3siY29udGV4dCI6Im5naW54Iiwic2VydmljZSI6IktCUyJ9XSwiZXhwIjoxNjc0MTE3Njg5LCJpYXQiOjE2NDI1ODE2NTksImlzcyI6IkFBUyBKV1QgSXNzdWVyIiwibmJmIjoxNjQyNTgxNjU5LCJzdWIiOiJzZ3hfdXNlciJ9.zVE23gZMENt0Dn2nhxT9byMVVp8JPWNk2mof3jUyKnjDV9Dx3LFNyKSkPs-PFJq5uwUkEQK78rEa68TcB9_Vuu3gRSHPUtT1LOyb2xkv3gGIgMBCwe9WyjyCChTYuDiSD60yj6s-IgzvS8m-RMMGSeTVnNz0fKW0-GZA0e64MeK_N0fVy8Gag7ejsMAJFA-7RcR1EcdkB-_zTQtBlZEmApXRPMJCxF5tdO3KRwrEFushPHpvfuFIqIraPahW7vnCfGR-aZhx4WUtT0HXrPTm1Ro2YAZJYe4JFfP-kwbjSdI5fGfN-i6rZI2MoiI9seKVyFnPhOIojsJLi6WHIyLISl94Ygx4QDf-HpdSGuXo07iMSrUEg62Wq_ZdSI5gAdN8EjoveG3TSo00wxOwcLCHkd12YNwTjXmYhOV5MjBkxd2_VFpqmIJZL2shH97y24s1PlLz732musioNfhQ9X2gCLtAtBXGk_buGuUpBRL_YxR9OsIEq7WVwZihaFe8YXIp"
						}
					]
				},
				{
					"name": "createFDagentLongLivedToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearerTokenFDagentLongLived\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{bearerTokenGlobalAdminUserCsp}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/jwt"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"{{hostHardwareUuid}}\",\n    \"validity_seconds\": 86400,\n    \"claims\": {\n        \"permissions\": [\n            {\n                \"rules\": [\n                    \"platforms:push:*\",\n                    \"tcb_status:retrieve:*\"\n                ],\n                \"service\": \"TCS\"\n            },\n            {\n                \"rules\": [\n                    \"hosts:create:*\"\n                ],\n                \"service\": \"FDS\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/custom-claims-token",
							"protocol": "https",
							"host": [
								"{{aasCsp}}"
							],
							"port": "{{aasPortCsp}}",
							"path": [
								"aas",
								"v1",
								"custom-claims-token"
							]
						},
						"description": "Creates a new bearer token that can be used in the Authorization header for other API requests. Bearer token Authorization is required when requesting custom claims token from Authservice."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{bearerTokenGlobalAdminUserCsp}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/jwt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subject\": \"{{hostHardwareUuid}}\",\n    \"validity_seconds\": 86400,\n    \"claims\": {\n        \"permissions\": [\n            {\n                \"rules\": [\n                    \"platforms:push:*\",\n                    \"tcb_status:retrieve:*\"\n                ],\n                \"service\": \"TCS\"\n            },\n            {\n                \"rules\": [\n                    \"hosts:create:*\"\n                ],\n                \"service\": \"FDS\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "https://{{aasCsp}}:{{aasPortCsp}}/aas/v1/custom-claims-token",
									"protocol": "https",
									"host": [
										"{{aasCsp}}"
									],
									"port": "{{aasPortCsp}}",
									"path": [
										"aas",
										"v1",
										"custom-claims-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "jwt",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/jwt"
								},
								{
									"key": "Date",
									"value": "Wed, 19 Jan 2022 08:47:11 GMT"
								},
								{
									"key": "Content-Length",
									"value": "952"
								}
							],
							"cookie": [],
							"body": "eyJhbGciOiJSUzM4NCIsImtpZCI6IjUzZTM3NWQzOGZiZmQ3MzQxM2U4YmI0N2Y0YjU5NjViMTJhZTM0OTkiLCJ0eXAiOiJKV1QifQ.eyJwZXJtaXNzaW9ucyI6W3sicnVsZXMiOlsicGxhdGZvcm1zOnB1c2g6KiIsInRjYl9zdGF0dXM6cmV0cmlldmU6KiJdLCJzZXJ2aWNlIjoiVENTIn0seyJydWxlcyI6WyJob3N0czpjcmVhdGU6KiJdLCJzZXJ2aWNlIjoiRkRTIn1dLCJleHAiOjE2NDI2Njg0MzEsImlhdCI6MTY0MjU4MjAwMSwiaXNzIjoiQUFTIEpXVCBJc3N1ZXIiLCJuYmYiOjE2NDI1ODIwMDEsInN1YiI6Ijg4ODg4ODg4LTg4ODctMWExNS0wYTA0LTJmMzJhNWE1YTVhNSJ9.u6gog6Xw8OPpCUT3-bJHLvUIqQLkn4-6gS2WiyRPJrc6nITk5CpMR1iCiVxV2zCX6C8td18ax7LrTluYtl8gU7W1P2HNKgQMmKSkLw9JgLFpo7WjpoidVzuteCPwznONPT2b4G4tPZNbyGH81BWtF7em7cbrNtaZuNbezUY5_Gb3GUVXnFEZKmQiOHOicPwEkQ2ODpLrmWAW8V7C6CrNZE4WNzKYSz6BgDo2Ezd27O7iZ_nhsnUq-Wg-PiBhoPoQAgz0Sbrnc97aJC4N_CxBD0NpbkwMl0bJuU8uc1hNaQk2gVFJyyzrgQ7Sakt-VfiJY-wwPSFQUXyJDtXpG6l81isLFFxOFv30dVbvxbgxrg3k0GE6NA8wt_MiPYLzpUTukLOs1RhyYld-D9eEcOipi0ijrNYK9A0wa1P0mbT2RWNZEH70lizHgO0SaJU1kXLov165Hfhp1JrVZg1rvXfSO2WH6wnffiowWUELZI7ArJE-_rzbJC22v3Dr_kW3XtBJ"
						}
					]
				}
			],
			"description": "To make an API request to an Intel® SecL-DC service, an authentication token is now required. API requests must now include an Authorization header with an appropriate token:\n\n```\nAuthorization: Bearer <token>\n```\n\nThe token is issued by the AAS and will expire after a set amount of time. This token may be used with any Intel® SecL-DC service, and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for."
		},
		{
			"name": "Cache Platform Info to TCS",
			"item": [
				{
					"name": "cachePlatformInfo",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenFDagentLongLived}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cpu_svn\": \"{{cpusvn}}\",\n    \"enc_ppid\": \"{{encppid}}\",\n    \"manifest\": \"{{manifest}}\",\n    \"pce_id\": \"{{pceid}}\",\n    \"pce_svn\": \"{{pcesvn}}\",\n    \"qe_id\": \"{{qeid}}\",\n    \"hardware_uuid\": \"{{hostHardwareUuid}}\"  \n}"
						},
						"url": {
							"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/platforms",
							"protocol": "https",
							"host": [
								"{{tcs}}"
							],
							"port": "{{tcsPort}}",
							"path": [
								"tcs",
								"v4",
								"sgx",
								"platforms"
							]
						},
						"description": "Retrieves the platform collateral from PCS server and stores the platform data and collateral in DB.  \nThe serialized PlatformData Go struct object represents the content of the request body.\n\n| Attribute | Description |\n| --- | --- |\n| cpu_svn | Hex-encoded string representation of security version number of the CPU. |\n| enc_ppid | Hex-encoded string representation of Provisioning ID for the processor package or the platform instance. |\n| manifest | Hex-encoded string representation of manifest. |\n| pce_id | Hex-encoded string representation of PC enclave identifier. |\n| pce_svn | Hex-encoded string representation of security version number of the PCE currently loaded on the platform. |\n| qe_id | Hex-encoded string representation of platform identifier. |\n| hardware_uuid | Host hardware-uuid. |\n\nReturns - The serialized Response Go struct object which mentions platform info is cached or not."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenFDagentLongLived}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cpu_svn\": \"{{cpusvn}}\",\n    \"enc_ppid\": \"{{encppid}}\",\n    \"manifest\": \"{{manifest}}\",\n    \"pce_id\": \"{{pceid}}\",\n    \"pce_svn\": \"{{pcesvn}}\",\n    \"qe_id\": \"{{qeid}}\",\n    \"hardware_uuid\": \"{{hostHardwareUuid}}\"  \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/platforms",
									"protocol": "https",
									"host": [
										"{{tcs}}"
									],
									"port": "{{tcsPort}}",
									"path": [
										"tcs",
										"v4",
										"sgx",
										"platforms"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Dec 2021 07:22:16 GMT"
								},
								{
									"key": "Content-Length",
									"value": "62"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"Success\",\n    \"message\": \"platform info already cached\"\n}"
						}
					]
				}
			],
			"description": "Feature Discovery Agent pushes platform information to TEE Caching Service (TCS), which uses it to get the PCK Certificate and other SGX collateral from the Intel SGX Provisioning Certification Service (PCS) and caches them locally. When a workload on the platform needs to generate an SGX Quote, it retrieves the PCK Certificate of the platform from TCS.\n\nFeature Discovery Agent makes use of the following TEE Caching Service (TCS) REST endpoint, to push SGX platform values (encrypted_ppid, pcesvn, cpusvn, qeid, pceid and manifest).",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Verify sgx Tcb Info",
			"item": [
				{
					"name": "retrieveSgxTcbInfo",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/tcb?fmspc={{fmspc}}",
							"protocol": "https",
							"host": [
								"{{tcs}}"
							],
							"port": "{{tcsPort}}",
							"path": [
								"tcs",
								"v4",
								"sgx",
								"tcb"
							],
							"query": [
								{
									"key": "fmspc",
									"value": "{{fmspc}}",
									"description": "(Required) Description of the processor package or platform instance including its Family, Model, Stepping, Platform Type, and Customized SKU(if applies)."
								}
							]
						},
						"description": "Retrieves the Trusted Compute Base Information for SGX enabled platform.  \nReturns - The serialized TcbInfoResponse Go struct object that was retrieved."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/tcb?fmspc={{fmspc}}",
									"protocol": "https",
									"host": [
										"{{tcs}}"
									],
									"port": "{{tcsPort}}",
									"path": [
										"tcs",
										"v4",
										"sgx",
										"tcb"
									],
									"query": [
										{
											"key": "fmspc",
											"value": "{{fmspc}}",
											"description": "FMSPC value of the platform."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "TCB-Info-Issuer-Chain",
									"value": "-----BEGIN%20CERTIFICATE-----%0AMIICkDCCAjagAwIBAgIUTh8n662T%2FsqPZK%2B7n3H67%2FKGwu0wCgYIKoZIzj0EAwIw%0AaDEaMBgGA1UEAwwRSW50ZWwgU0dYIFJvb3QgQ0ExGjAYBgNVBAoMEUludGVsIENv%0AcnBvcmF0aW9uMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJ%0ABgNVBAYTAlVTMB4XDTE5MTAzMTEyMzM0N1oXDTI2MTAzMTEyMzM0N1owbDEeMBwG%0AA1UEAwwVSW50ZWwgU0dYIFRDQiBTaWduaW5nMRowGAYDVQQKDBFJbnRlbCBDb3Jw%0Ab3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYD%0AVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOnYw9LbN%2FJmyUttXa0M%0AiBEenjPbxbR4C8MuVYxDI%2BLe8lDBLp9X4wMzCAUF%2FfI%2F31giClXp%2Fy0erLbLZjdV%0A07%2BjgbkwgbYwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0f%0ABE8wTTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2%0AaWNlcy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuZGVyMB0GA1UdDgQWBBROHyfr%0ArZP%2Byo9kr7ufcfrv8obC7TAOBgNVHQ8BAf8EBAMCBsAwDAYDVR0TAQH%2FBAIwADAK%0ABggqhkjOPQQDAgNIADBFAiEA9xQeifK%2B2abQGnrAgk0hrOhdyvJQorh2cEMn4Gwr%0A4hoCIFHW5qQ9G2wBJ4GMNQqv%2FoMfbPtzmyTlaWWzwxkqM0CT%0A-----END%20CERTIFICATE-----%0A-----BEGIN%20CERTIFICATE-----%0AMIIClDCCAjmgAwIBAgIVAOnoRFJTNlxLGJoR%2FEMYLKXcIIBIMAoGCCqGSM49BAMC%0AMGgxGjAYBgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBD%0Ab3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQsw%0ACQYDVQQGEwJVUzAeFw0xOTEwMzEwOTQ5MjFaFw00OTEyMzEyMzU5NTlaMGgxGjAY%0ABgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3Jh%0AdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYDVQQG%0AEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE%2F6D%2F1WHNrWwPmNMIyBKMW5%0AJ6JzMsjo6xP2vkK1cdZGb1PGRP%2FC%2F8ECgiDkmklmzwLzLi%2B000m7LLrtKJA3oC2j%0Agb8wgbwwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0fBE8w%0ATTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2aWNl%0Acy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuZGVyMB0GA1UdDgQWBBTp6ERSUzZc%0ASxiaEfxDGCyl3CCASDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH%2FBAgwBgEB%2FwIB%0AATAKBggqhkjOPQQDAgNJADBGAiEAzw9zdUiUHPMUd0C4mx41jlFZkrM3y5f1lgnV%0AO7FbjOoCIQCoGtUmT4cXt7V%2BySHbJ8Hob9AanpvXNH1ER%2B%2FgZF%2BopQ%3D%3D%0A-----END%20CERTIFICATE-----%0A"
								},
								{
									"key": "Date",
									"value": "Mon, 06 Dec 2021 13:40:24 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1379"
								}
							],
							"cookie": [],
							"body": "{\n    \"tcbInfo\": {\n        \"id\": \"SGX\",\n        \"version\": 3,\n        \"issueDate\": \"2021-12-06T12:18:10Z\",\n        \"nextUpdate\": \"2022-01-05T12:18:10Z\",\n        \"fmspc\": \"10606A000000\",\n        \"pceId\": \"0000\",\n        \"tcbType\": 0,\n        \"tcbEvaluationDataNumber\": 5,\n        \"tcbLevels\": [\n            {\n                \"tcb\": {\n                    \"sgxtcbcomponents\": [\n                        {\n                            \"svn\": 3\n                        },\n                        {\n                            \"svn\": 3\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        }\n                    ],\n                    \"pcesvn\": 10\n                },\n                \"tcbDate\": \"2020-07-28T00:00:00Z\",\n                \"tcbStatus\": \"UpToDate\"\n            },\n            {\n                \"tcb\": {\n                    \"sgxtcbcomponents\": [\n                        {\n                            \"svn\": 2\n                        },\n                        {\n                            \"svn\": 2\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        }\n                    ],\n                    \"pcesvn\": 10\n                },\n                \"tcbDate\": \"2020-05-28T00:00:00Z\",\n                \"tcbStatus\": \"OutOfDate\"\n            },\n            {\n                \"tcb\": {\n                    \"sgxtcbcomponents\": [\n                        {\n                            \"svn\": 1\n                        },\n                        {\n                            \"svn\": 1\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        }\n                    ],\n                    \"pcesvn\": 9\n                },\n                \"tcbDate\": \"2020-03-22T00:00:00Z\",\n                \"tcbStatus\": \"OutOfDate\"\n            },\n            {\n                \"tcb\": {\n                    \"sgxtcbcomponents\": [\n                        {\n                            \"svn\": 1\n                        },\n                        {\n                            \"svn\": 1\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        },\n                        {\n                            \"svn\": 0\n                        }\n                    ],\n                    \"pcesvn\": 0\n                },\n                \"tcbDate\": \"2020-02-22T00:00:00Z\",\n                \"tcbStatus\": \"OutOfDate\"\n            }\n        ]\n    },\n    \"signature\": \"e33ef6b38b2970242426138f2e0af23614cd7d501718818b072a26dd0f02990b94b32694b7c2208b1d55a95d081fbc39f1f9b55a6fc9b23057d91937b48c3ce1\"\n}"
						}
					]
				}
			],
			"description": "TEE Caching Service (TCS) validates the input parameters and contacts Intel PCS Server to get all PCK certificates for this platform by providing enc_ppid and pceid as input parameters.\n\nIntel PCS Server returns a list of Platform Certification Key (PCK) Certificates for the platform along with certificate issuer chain. TCS picks any Certificate from the list of certificates and extracts the FMSPC value.\n\nUsing the FMSPC value, TCS gets the corresponding TCBInfo for the FMSPC in DB, if not found makes another API call to Intel PCS Server to get the TCBInfo structure for the platform.\n\nWith the TCBInfo structure, cpusvn, pcesvn, pceid and list of Platform Certification Key (PCK) certificates as input, TCS makes a call to PCK Certificate selection library (Part of SGX DCAP infrastructure) to get the best suited PCK certificate for the current raw TCB level.\n\nTCS updates the Platform table with the latest fmspc value along with platform values.\n\nTCS updates the PCKCert table with the new set of PCK certificates received along with corresponding tcbm value for each pck certificate.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Verify PCK Certificate",
			"item": [
				{
					"name": "retrievePckCert",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/pckcert?encrypted_ppid={{encppid}}&cpusvn={{cpusvn}}&pcesvn={{pcesvn}}&pceid={{pceid}}&qeid={{qeid}}",
							"protocol": "https",
							"host": [
								"{{tcs}}"
							],
							"port": "{{tcsPort}}",
							"path": [
								"tcs",
								"v4",
								"sgx",
								"pckcert"
							],
							"query": [
								{
									"key": "encrypted_ppid",
									"value": "{{encppid}}",
									"description": "(Required) Hex-encoded string representation of Provisioning ID for the processor package or the platform instance."
								},
								{
									"key": "cpusvn",
									"value": "{{cpusvn}}",
									"description": "(Required) Hex-encoded string representation of security version number of the CPU."
								},
								{
									"key": "pcesvn",
									"value": "{{pcesvn}}",
									"description": "(Required) Hex-encoded string representation of security version number of the PCE currently loaded on the platform."
								},
								{
									"key": "pceid",
									"value": "{{pceid}}",
									"description": "(Required) Hex-encoded string representation of PC enclave identifier."
								},
								{
									"key": "qeid",
									"value": "{{qeid}}",
									"description": "(Required) Hex-encoded string representation of platform identifier."
								}
							]
						},
						"description": "Retrieves the Provisioning Certificate list from PCS server.  \nReturns - The best-suited Provisioning Certificate retrieved from PCS server."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/pckcert?encrypted_ppid={{encppid}}&cpusvn={{cpusvn}}&pcesvn={{pcesvn}}&pceid={{pceid}}&qeid={{qeid}}",
									"protocol": "https",
									"host": [
										"{{tcs}}"
									],
									"port": "{{tcsPort}}",
									"path": [
										"tcs",
										"v4",
										"sgx",
										"pckcert"
									],
									"query": [
										{
											"key": "encrypted_ppid",
											"value": "{{encppid}}",
											"description": "(Required) Hex-encoded string representation of Provisioning ID for the processor package or the platform instance."
										},
										{
											"key": "cpusvn",
											"value": "{{cpusvn}}",
											"description": "(Required) Hex-encoded string representation of security version number of the CPU."
										},
										{
											"key": "pcesvn",
											"value": "{{pcesvn}}",
											"description": "(Required) Hex-encoded string representation of security version number of the PCE currently loaded on the platform."
										},
										{
											"key": "pceid",
											"value": "{{pceid}}",
											"description": "(Required) Hex-encoded string representation of PC enclave identifier."
										},
										{
											"key": "qeid",
											"value": "{{qeid}}",
											"description": "(Required) Hex-encoded string representation of platform identifier."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "raw",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/x-pem-file"
								},
								{
									"key": "SGX-FMSPC",
									"value": "10606A000000"
								},
								{
									"key": "SGX-PCK-Certificate-CA-Type",
									"value": "platform"
								},
								{
									"key": "SGX-PCK-Certificate-Issuer-Chain",
									"value": "-----BEGIN%20CERTIFICATE-----%0AMIICmjCCAkCgAwIBAgIUWSPTp0qoY1QuOXCt4A8HK1ckKrcwCgYIKoZIzj0EAwIw%0AaDEaMBgGA1UEAwwRSW50ZWwgU0dYIFJvb3QgQ0ExGjAYBgNVBAoMEUludGVsIENv%0AcnBvcmF0aW9uMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJ%0ABgNVBAYTAlVTMB4XDTE5MTAzMTEyMzM0N1oXDTM0MTAzMTEyMzM0N1owcDEiMCAG%0AA1UEAwwZSW50ZWwgU0dYIFBDSyBQbGF0Zm9ybSBDQTEaMBgGA1UECgwRSW50ZWwg%0AQ29ycG9yYXRpb24xFDASBgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQIDAJDQTEL%0AMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQwp%2BLc%2BTUBtg1H%0A%2BU8JIsMsbjHjCkTtXb8jPM6r2dhu9zIblhDZ7INfqt3Ix8XcFKD8k0NEXrkZ66qJ%0AXa1KzLIKo4G%2FMIG8MB8GA1UdIwQYMBaAFOnoRFJTNlxLGJoR%2FEMYLKXcIIBIMFYG%0AA1UdHwRPME0wS6BJoEeGRWh0dHBzOi8vc2J4LWNlcnRpZmljYXRlcy50cnVzdGVk%0Ac2VydmljZXMuaW50ZWwuY29tL0ludGVsU0dYUm9vdENBLmRlcjAdBgNVHQ4EFgQU%0AWSPTp0qoY1QuOXCt4A8HK1ckKrcwDgYDVR0PAQH%2FBAQDAgEGMBIGA1UdEwEB%2FwQI%0AMAYBAf8CAQAwCgYIKoZIzj0EAwIDSAAwRQIhAJ1q%2BFTz%2BgUuVfBQuCgJsFrL2TTS%0Ae1aBZ53O52TjFie6AiAriPaRahUX9Oa9kGLlAchWXKT6j4RWSR50BqhrN3UT4A%3D%3D%0A-----END%20CERTIFICATE-----%0A-----BEGIN%20CERTIFICATE-----%0AMIIClDCCAjmgAwIBAgIVAOnoRFJTNlxLGJoR%2FEMYLKXcIIBIMAoGCCqGSM49BAMC%0AMGgxGjAYBgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBD%0Ab3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQsw%0ACQYDVQQGEwJVUzAeFw0xOTEwMzEwOTQ5MjFaFw00OTEyMzEyMzU5NTlaMGgxGjAY%0ABgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3Jh%0AdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYDVQQG%0AEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE%2F6D%2F1WHNrWwPmNMIyBKMW5%0AJ6JzMsjo6xP2vkK1cdZGb1PGRP%2FC%2F8ECgiDkmklmzwLzLi%2B000m7LLrtKJA3oC2j%0Agb8wgbwwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0fBE8w%0ATTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2aWNl%0Acy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuZGVyMB0GA1UdDgQWBBTp6ERSUzZc%0ASxiaEfxDGCyl3CCASDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH%2FBAgwBgEB%2FwIB%0AATAKBggqhkjOPQQDAgNJADBGAiEAzw9zdUiUHPMUd0C4mx41jlFZkrM3y5f1lgnV%0AO7FbjOoCIQCoGtUmT4cXt7V%2BySHbJ8Hob9AanpvXNH1ER%2B%2FgZF%2BopQ%3D%3D%0A-----END%20CERTIFICATE-----%0A"
								},
								{
									"key": "SGX-TCBm",
									"value": "020200000000000000000000000000000A00"
								},
								{
									"key": "Date",
									"value": "Mon, 06 Dec 2021 14:00:23 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1772"
								}
							],
							"cookie": [],
							"body": "-----BEGIN CERTIFICATE-----\nMIIE9DCCBJugAwIBAgIVAOApN9vAqmYAo1+YnxQYCGeZJWNrMAoGCCqGSM49BAMCMHAxIjAgBgNV\nBAMMGUludGVsIFNHWCBQQ0sgUGxhdGZvcm0gQ0ExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0aW9u\nMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJBgNVBAYTAlVTMB4XDTIxMTEy\nMzEyMjIxNVoXDTI4MTEyMzEyMjIxNVowcDEiMCAGA1UEAwwZSW50ZWwgU0dYIFBDSyBDZXJ0aWZp\nY2F0ZTEaMBgGA1UECgwRSW50ZWwgQ29ycG9yYXRpb24xFDASBgNVBAcMC1NhbnRhIENsYXJhMQsw\nCQYDVQQIDAJDQTELMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQvPTZCAi8A\nwQi2q1WG1qxTGrOithru88QGeCGuP2H3+tmOAQFhyjx77tmxMpy4rG9J7yUqX3u4pFvpTX30o850\no4IDEDCCAwwwHwYDVR0jBBgwFoAUWSPTp0qoY1QuOXCt4A8HK1ckKrcwbwYDVR0fBGgwZjBkoGKg\nYIZeaHR0cHM6Ly9zYnguYXBpLnRydXN0ZWRzZXJ2aWNlcy5pbnRlbC5jb20vc2d4L2NlcnRpZmlj\nYXRpb24vdjQvcGNrY3JsP2NhPXBsYXRmb3JtJmVuY29kaW5nPWRlcjAdBgNVHQ4EFgQUgnaEDVNk\n5py7hs3c+bO5VHByYd0wDgYDVR0PAQH/BAQDAgbAMAwGA1UdEwEB/wQCMAAwggI5BgkqhkiG+E0B\nDQEEggIqMIICJjAeBgoqhkiG+E0BDQEBBBBpKPlFLjDR57ezWeVQG06YMIIBYwYKKoZIhvhNAQ0B\nAjCCAVMwEAYLKoZIhvhNAQ0BAgECAQIwEAYLKoZIhvhNAQ0BAgICAQIwEAYLKoZIhvhNAQ0BAgMC\nAQAwEAYLKoZIhvhNAQ0BAgQCAQAwEAYLKoZIhvhNAQ0BAgUCAQAwEAYLKoZIhvhNAQ0BAgYCAQAw\nEAYLKoZIhvhNAQ0BAgcCAQAwEAYLKoZIhvhNAQ0BAggCAQAwEAYLKoZIhvhNAQ0BAgkCAQAwEAYL\nKoZIhvhNAQ0BAgoCAQAwEAYLKoZIhvhNAQ0BAgsCAQAwEAYLKoZIhvhNAQ0BAgwCAQAwEAYLKoZI\nhvhNAQ0BAg0CAQAwEAYLKoZIhvhNAQ0BAg4CAQAwEAYLKoZIhvhNAQ0BAg8CAQAwEAYLKoZIhvhN\nAQ0BAhACAQAwEAYLKoZIhvhNAQ0BAhECAQowHwYLKoZIhvhNAQ0BAhIEEAICAAAAAAAAAAAAAAAA\nAAAwEAYKKoZIhvhNAQ0BAwQCAAAwFAYKKoZIhvhNAQ0BBAQGEGBqAAAAMA8GCiqGSIb4TQENAQUK\nAQEwHgYKKoZIhvhNAQ0BBgQQLBL+oZQlETCFKpQT91JIATBEBgoqhkiG+E0BDQEHMDYwEAYLKoZI\nhvhNAQ0BBwEBAf8wEAYLKoZIhvhNAQ0BBwIBAQAwEAYLKoZIhvhNAQ0BBwMBAf8wCgYIKoZIzj0E\nAwIDRwAwRAIgW6C31BcAI1cIin6CysWBSUmPidv9HHFCOeFSl+FZui0CIDhGMxBCXax4wxsw1Wo8\npwkxyrV/vs7lUzUIjalt/uYP\n-----END CERTIFICATE-----"
						}
					]
				}
			],
			"description": "We can now retrieve the Platform Certification Key (PCK) Certificate for the current raw TCB level of SGX enabled platform from the TEE Caching Service (TCS).",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Retrieve RootCA CRL",
			"item": [
				{
					"name": "RetrieveRootCACRL",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/rootcacrl",
							"protocol": "https",
							"host": [
								"{{tcs}}"
							],
							"port": "{{tcsPort}}",
							"path": [
								"tcs",
								"v4",
								"sgx",
								"rootcacrl"
							]
						},
						"description": "Retrieves the Root CA Certificate Revocation List.  \nReturns - The hex-encoded Root CA CRL retrieved from PCS server."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/rootcacrl",
									"protocol": "https",
									"host": [
										"{{tcs}}"
									],
									"port": "{{tcsPort}}",
									"path": [
										"tcs",
										"v4",
										"sgx",
										"rootcacrl"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "raw",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/pkix-crl"
								},
								{
									"key": "Date",
									"value": "Mon, 06 Dec 2021 14:02:26 GMT"
								},
								{
									"key": "Content-Length",
									"value": "584"
								}
							],
							"cookie": [],
							"body": "308201203081c8020101300a06082a8648ce3d0403023068311a301806035504030c11496e74656c2053475820526f6f74204341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3114301206035504070c0b53616e746120436c617261310b300906035504080c024341310b3009060355040613025553170d3231313030373039313234365a170d3232313030373039313234365aa02f302d300a0603551d140403020101301f0603551d23041830168014e9e8445253365c4b189a11fc43182ca5dc208048300a06082a8648ce3d040302034700304402200edaef9ff1a4d8a0483022e052c917794683dad8fbd29a8a3ee510da07dc34f902205562d7f6f785fde4a3c551557e1c496931b26fa799b16d729c44e93f3b61fd1d"
						}
					]
				}
			],
			"description": "We can now retrieve the RootCA CRL from QE Identity Issuer Chain.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Retrieve QE Identity",
			"item": [
				{
					"name": "RetrieveQEIdentity",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/qe/identity",
							"protocol": "https",
							"host": [
								"{{tcs}}"
							],
							"port": "{{tcsPort}}",
							"path": [
								"tcs",
								"v4",
								"sgx",
								"qe",
								"identity"
							]
						},
						"description": "Retrieves the Quoting Enclave Identity.  \nReturns - The serialized QeIdentityResponse Go struct object that was retrieved."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/qe/identity",
									"protocol": "https",
									"host": [
										"{{tcs}}"
									],
									"port": "{{tcsPort}}",
									"path": [
										"tcs",
										"v4",
										"sgx",
										"qe",
										"identity"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "SGX-Enclave-Identity-Issuer-Chain",
									"value": "-----BEGIN%20CERTIFICATE-----%0AMIICkDCCAjagAwIBAgIUTh8n662T%2FsqPZK%2B7n3H67%2FKGwu0wCgYIKoZIzj0EAwIw%0AaDEaMBgGA1UEAwwRSW50ZWwgU0dYIFJvb3QgQ0ExGjAYBgNVBAoMEUludGVsIENv%0AcnBvcmF0aW9uMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJ%0ABgNVBAYTAlVTMB4XDTE5MTAzMTEyMzM0N1oXDTI2MTAzMTEyMzM0N1owbDEeMBwG%0AA1UEAwwVSW50ZWwgU0dYIFRDQiBTaWduaW5nMRowGAYDVQQKDBFJbnRlbCBDb3Jw%0Ab3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYD%0AVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOnYw9LbN%2FJmyUttXa0M%0AiBEenjPbxbR4C8MuVYxDI%2BLe8lDBLp9X4wMzCAUF%2FfI%2F31giClXp%2Fy0erLbLZjdV%0A07%2BjgbkwgbYwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0f%0ABE8wTTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2%0AaWNlcy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuZGVyMB0GA1UdDgQWBBROHyfr%0ArZP%2Byo9kr7ufcfrv8obC7TAOBgNVHQ8BAf8EBAMCBsAwDAYDVR0TAQH%2FBAIwADAK%0ABggqhkjOPQQDAgNIADBFAiEA9xQeifK%2B2abQGnrAgk0hrOhdyvJQorh2cEMn4Gwr%0A4hoCIFHW5qQ9G2wBJ4GMNQqv%2FoMfbPtzmyTlaWWzwxkqM0CT%0A-----END%20CERTIFICATE-----%0A-----BEGIN%20CERTIFICATE-----%0AMIIClDCCAjmgAwIBAgIVAOnoRFJTNlxLGJoR%2FEMYLKXcIIBIMAoGCCqGSM49BAMC%0AMGgxGjAYBgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBD%0Ab3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQsw%0ACQYDVQQGEwJVUzAeFw0xOTEwMzEwOTQ5MjFaFw00OTEyMzEyMzU5NTlaMGgxGjAY%0ABgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3Jh%0AdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYDVQQG%0AEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE%2F6D%2F1WHNrWwPmNMIyBKMW5%0AJ6JzMsjo6xP2vkK1cdZGb1PGRP%2FC%2F8ECgiDkmklmzwLzLi%2B000m7LLrtKJA3oC2j%0Agb8wgbwwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0fBE8w%0ATTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2aWNl%0Acy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuZGVyMB0GA1UdDgQWBBTp6ERSUzZc%0ASxiaEfxDGCyl3CCASDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH%2FBAgwBgEB%2FwIB%0AATAKBggqhkjOPQQDAgNJADBGAiEAzw9zdUiUHPMUd0C4mx41jlFZkrM3y5f1lgnV%0AO7FbjOoCIQCoGtUmT4cXt7V%2BySHbJ8Hob9AanpvXNH1ER%2B%2FgZF%2BopQ%3D%3D%0A-----END%20CERTIFICATE-----%0A"
								},
								{
									"key": "Date",
									"value": "Mon, 06 Dec 2021 14:05:54 GMT"
								},
								{
									"key": "Content-Length",
									"value": "698"
								}
							],
							"cookie": [],
							"body": "{\n    \"enclaveIdentity\": {\n        \"id\": \"QE\",\n        \"version\": 2,\n        \"issueDate\": \"2021-12-06T12:02:00Z\",\n        \"nextUpdate\": \"2022-01-05T12:02:00Z\",\n        \"tcbEvaluationDataNumber\": 5,\n        \"miscselect\": \"00000000\",\n        \"miscselectMask\": \"FFFFFFFF\",\n        \"attributes\": \"11000000000000000000000000000000\",\n        \"attributesMask\": \"FBFFFFFFFFFFFFFF0000000000000000\",\n        \"mrsigner\": \"8C4F5775D796503E96137F77C68A829A0056AC8DED70140B081B094490C57BFF\",\n        \"isvprodid\": 1,\n        \"tcbLevels\": [\n            {\n                \"tcb\": {\n                    \"isvsvn\": 2\n                },\n                \"tcbDate\": \"2020-07-28T00:00:00Z\",\n                \"tcbStatus\": \"UpToDate\"\n            },\n            {\n                \"tcb\": {\n                    \"isvsvn\": 1\n                },\n                \"tcbDate\": \"2018-08-15T00:00:00Z\",\n                \"tcbStatus\": \"OutOfDate\"\n            }\n        ]\n    },\n    \"signature\": \"ef567d0fb834860a14c6711a12c95de69b5d5aa8dbb277c939ad8a2f2ab4f2ffea6df4a623a3cff26ea04324b22276d539c8ed9d686daf053dce0190290be5b4\"\n}"
						}
					]
				}
			],
			"description": "We can now retrieve the Quoting Enclave Identity from Intel PCS Server.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Retrieve PCK CRL",
			"item": [
				{
					"name": "RetrievePCKCRL",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/pckcrl?ca=processor",
							"protocol": "https",
							"host": [
								"{{tcs}}"
							],
							"port": "{{tcsPort}}",
							"path": [
								"tcs",
								"v4",
								"sgx",
								"pckcrl"
							],
							"query": [
								{
									"key": "ca",
									"value": "processor",
									"description": "(Required) Certification Authority. Supported CAs are \"platform\" and \"processor\""
								}
							]
						},
						"description": "Retrieves the Provisioning Certificate Revocation List.  \nReturns - The hex-encoded PCK CRL retrieved from PCS server."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/pckcrl?ca=processor",
									"protocol": "https",
									"host": [
										"{{tcs}}"
									],
									"port": "{{tcsPort}}",
									"path": [
										"tcs",
										"v4",
										"sgx",
										"pckcrl"
									],
									"query": [
										{
											"key": "ca",
											"value": "processor"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "raw",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/pkix-crl"
								},
								{
									"key": "SGX-PCK-CRL-Issuer-Chain",
									"value": "-----BEGIN%20CERTIFICATE-----%0AMIICnDCCAkKgAwIBAgIVAMHp3Hk19b3%2FLlphIQ0b13g7pUxaMAoGCCqGSM49BAMC%0AMGgxGjAYBgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBD%0Ab3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQsw%0ACQYDVQQGEwJVUzAeFw0xOTEwMzExMjMzNDdaFw0zNDEwMzExMjMzNDdaMHExIzAh%0ABgNVBAMMGkludGVsIFNHWCBQQ0sgUHJvY2Vzc29yIENBMRowGAYDVQQKDBFJbnRl%0AbCBDb3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNB%0AMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABHMzh%2FiyDU8k%0ABve82Ypt7qOEU%2B3L%2BVjYeaWsR0PKcZjNKbro%2FBKDLjFYTv%2FCy1cCxpzL5y9BOFvS%0AbXG%2Bkt1%2Booujgb8wgbwwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgw%0AVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0%0AZWRzZXJ2aWNlcy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuZGVyMB0GA1UdDgQW%0ABBTB6dx5NfW9%2Fy5aYSENG9d4O6VMWjAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH%2F%0ABAgwBgEB%2FwIBADAKBggqhkjOPQQDAgNIADBFAiEAxyLc3ZxBTGz9Dy6JJ4PU%2FhlX%0AWqJMzEyxXWLv3WJDGTMCIADfPlT13%2Fmr2kS5GzXOC4DtoavJ1NJMV2YJW8MQONl8%0A-----END%20CERTIFICATE-----%0A-----BEGIN%20CERTIFICATE-----%0AMIIClDCCAjmgAwIBAgIVAOnoRFJTNlxLGJoR%2FEMYLKXcIIBIMAoGCCqGSM49BAMC%0AMGgxGjAYBgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBD%0Ab3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQsw%0ACQYDVQQGEwJVUzAeFw0xOTEwMzEwOTQ5MjFaFw00OTEyMzEyMzU5NTlaMGgxGjAY%0ABgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3Jh%0AdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYDVQQG%0AEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE%2F6D%2F1WHNrWwPmNMIyBKMW5%0AJ6JzMsjo6xP2vkK1cdZGb1PGRP%2FC%2F8ECgiDkmklmzwLzLi%2B000m7LLrtKJA3oC2j%0Agb8wgbwwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0fBE8w%0ATTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2aWNl%0Acy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuZGVyMB0GA1UdDgQWBBTp6ERSUzZc%0ASxiaEfxDGCyl3CCASDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH%2FBAgwBgEB%2FwIB%0AATAKBggqhkjOPQQDAgNJADBGAiEAzw9zdUiUHPMUd0C4mx41jlFZkrM3y5f1lgnV%0AO7FbjOoCIQCoGtUmT4cXt7V%2BySHbJ8Hob9AanpvXNH1ER%2B%2FgZF%2BopQ%3D%3D%0A-----END%20CERTIFICATE-----%0A"
								},
								{
									"key": "Date",
									"value": "Mon, 06 Dec 2021 14:09:34 GMT"
								},
								{
									"key": "Content-Length",
									"value": "604"
								}
							],
							"cookie": [],
							"body": "3082012a3081d1020101300a06082a8648ce3d04030230713123302106035504030c1a496e74656c205347582050434b2050726f636573736f72204341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3114301206035504070c0b53616e746120436c617261310b300906035504080c024341310b3009060355040613025553170d3231313230363132313831305a170d3232303130353132313831305aa02f302d300a0603551d140403020101301f0603551d23041830168014c1e9dc7935f5bdff2e5a61210d1bd7783ba54c5a300a06082a8648ce3d0403020348003045022100ff80e80f90ff4dad4666301b472e349148a510bc9b040dcab18f344cb2c6346a02200133db32968a34c97903ac472713d0e27731a26b99534b2b795de002c691a932"
						}
					]
				}
			],
			"description": "We can now retrieve the PCK CRL from Intel PCS Server.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Refresh Platform Collaterals in TCS Database",
			"item": [
				{
					"name": "refreshPlatformInfoStatus",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerTokenGlobalAdminUserCsp}}",
								"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/refreshes?fmspc={{fmspc}}",
							"protocol": "https",
							"host": [
								"{{tcs}}"
							],
							"port": "{{tcsPort}}",
							"path": [
								"tcs",
								"v4",
								"sgx",
								"refreshes"
							],
							"query": [
								{
									"key": "fmspc",
									"value": "{{fmspc}}",
									"description": "Comma separated fmspc values for which PCK certs needs to be refreshed."
								}
							]
						},
						"description": "Refreshes the platform collateral and stores the updated collateral in DB.  \nSupported query params are optional, if provided, only PCK certificates would be refreshed else Non-PCK collateral are refreshed.  \nReturns - The serialized Response Go struct object which mentions platform collateral are refreshed or not.  \nA valid bearer token should be provided to authorize this REST call.\n\nThe status field in the response conveys the following :  \n\"idle\" - No refresh is currently in progress.  \n\"inprogress\" - A refresh is already in progress.  \n\"toomanyrequests\" - A refresh will not be started if the last refresh was completed less 900 seconds ago.\n\nThe last-refresh.status field in the response conveys the following :  \n\"success\" - The last refresh was successfull.  \n\"failed\" - The last refresh failed."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenGlobalAdminUserCsp}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{tcs}}:{{tcsPort}}/tcs/v4/sgx/refreshes?fmspc={{fmspc}}",
									"protocol": "https",
									"host": [
										"{{tcs}}"
									],
									"port": "{{tcsPort}}",
									"path": [
										"tcs",
										"v4",
										"sgx",
										"refreshes"
									],
									"query": [
										{
											"key": "fmspc",
											"value": "{{fmspc}}",
											"description": "Comma separated fmspc values for which PCK certs needs to be refreshed."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 19 Jan 2022 08:48:31 GMT"
								},
								{
									"key": "Content-Length",
									"value": "75"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"Success\",\n    \"message\": \"Non PCK collateral refreshed successfully\"\n}"
						}
					]
				}
			],
			"description": "TCS provides following REST endpoints for refreshing the platform collaterals, outside of the periodic refresh cycles.\n\n$hostname:$port/tcs/v4/sgx/refreshes\n\nOn successful refresh, TCS will remember the last refresh status by creating a single entry in the DB.\n\nAn Admin can make use of this REST endpoint to force the refresh of PCK Certificates, PCK CRL, TCB info and QE Identity information. This is useful in scenarios like TCB recovery."
		},
		{
			"name": "SGX Attestation",
			"item": [
				{
					"name": "Extracting SGX Enclave values for Key Transfer Policy",
					"item": [],
					"description": "Values that are specific to the enclave such as sgx_enclave_issuer_anyof, sgx_enclave_measurement_anyof and sgx_enclave_issuer_product_id_anyof can be retrived using sgx_sign utility that is available as part of Intel SGX SDK.\r\n\r\nRun sgx_sign utility on the signed enclave (This command should be run on the build system).\r\n\r\n```\r\n/opt/intel/sgxsdk/bin/x64/sgx_sign dump -enclave <path to the signed enclave> -dumpfile info.txt\r\n```\r\n\r\nFor sgx_enclave_issuer_anyof, in info.txt, search for \"mrsigner->value\" . E.g mrsigner->value :\r\n\r\n```\r\nmrsigner->value: \"0x83 0xd7 0x19 0xe7 0x7d 0xea 0xca 0x14 0x70 0xf6 0xba 0xf6 0x2a 0x4d 0x77 0x43 0x03 0xc8 0x99 0xdb 0x69 0x02 0x0f 0x9c 0x70 0xee 0x1d 0xfc 0x08 0xc7 0xce 0x9e\"\r\n```\r\n\r\nRemove the whitespace and 0x characters from the above string and add it to the policy file. E.g :\r\n\r\n```\r\n\"sgx_enclave_issuer_anyof\":[\"83d719e77deaca1470f6baf62a4d774303c899db69020f9c70ee1dfc08c7ce9e\"]\r\n```\r\n\r\nFor sgx_enclave_measurement_anyof, in info.txt, search for metadata->enclave_css.body.enclave_hash.m . E.g metadata->enclave_css.body.enclave_hash.m :\r\n\r\n```\r\nmetadata->enclave_css.body.enclave_hash.m:\r\n0xad 0x46 0x74 0x9e 0xd4 0x1e 0xba 0xa2 0x32 0x72 0x52 0x04 0x1e 0xe7 0x46 0xd3\r\n0x79 0x1a 0x9f 0x24 0x31 0x83 0x0f 0xee 0x08 0x83 0xf7 0x99 0x3c 0xaf 0x31 0x6a\r\n```\r\n\r\nRemove the whitespace and 0x characters from the above string and add it to the policy file. E.g :\r\n\r\n```\r\n\"sgx_enclave_measurement_anyof\":[\"ad46749ed41ebaa2327252041ee746d3791a9f2431830fee0883f7993caf316a\"]\r\n```"
				},
				{
					"name": "Provisioning KBS",
					"item": [
						{
							"name": "keyTransferPolicy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"keyTransferPolicyId\", pm.response.json().id)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "(Required) Content-Type header"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"description": "(Required) Accept header",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"attestation_type\": [\n        \"SGX\"\n    ],\n    \"sgx\": {\n        \"attributes\": {\n            \"mrsigner\": [\n                \"83d719e77deaca1470f6baf62a4d774303c899db69020f9c70ee1dfc08c7ce9e\"\n            ],\n            \"isvprodid\": [\n                0\n            ],\n            \"mrenclave\": [\n                \"d767e303208c8a274a395d58a26cd4a14372cf67291d0ab34f6f64255cfc4586\"\n            ],\n            \"isvsvn\": 0,\n            \"client_permissions\": [\n                \"nginx\",\n                \"USA\"\n            ],\n            \"enforce_tcb_upto_date\": false\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{kbs}}:{{kbsPort}}/kbs/v1/key-transfer-policies",
									"protocol": "https",
									"host": [
										"{{kbs}}"
									],
									"port": "{{kbsPort}}",
									"path": [
										"kbs",
										"v1",
										"key-transfer-policies"
									]
								},
								"description": "Creates a key transfer policy. Transfer-Policy with only one attestation-type i.e; SGX or TDX could be created at a time.\n\nKey transfer policy can be created either by providing only list of policy-ids or only TDX/SGX attributes or both policy-ids and attributes.\n\nThe serialized KeyTransferPolicy Go struct object represents the content of the request body.\n\n| Attribute | Description |\n| --- | --- |\n| attestation_type | Array of Attestation Type identifiers that client must support to get the key. Expect client to advertise these with the key request e.g. \"SGX\", \"TDX\" (note that if key server needs to restrict technologies, then it should list only the ones that can receive the key). |\n| mrsigner | Array of measurements of SGX enclave’s code signing certificate. This is mandatory. The same issuer must be added as a trusted certificate in key server configuration settings. |\n| isvprodid | Array of (16-bit value) (ISVPRODID). This is mandatory. This is like a qualifier for the issuer so same issuer (code signing) key can sign separate products. |\n| mrenclave | Array of enclave measurements that are allowed to retrieve the key (MRENCLAVE). Expect client to have one of these measurements in the SGX quote (this supports use case of providing key only to an SGX enclave that will enforce the key usage policy locally). |\n| isvsvn | Minimum security version number required for Enclave. |\n| client_permissions | Array of permission to expect in client api key. Expect client api key to have all of these names. |\n| mrsignerseam | Array of measurements of seam module issuer. This is mandatory. |\n| mrseam | Array of measurements of seam module. This is mandatory. |\n| mrtd | Array of TD measurements. |\n| rtmr0 | Measurement extended to RTMR0. |\n| rtmr1 | Measurement extended to RTMR1. |\n| rtmr2 | Measurement extended to RTMR2. |\n| rtmr3 | Measurement extended to RTMR3. |\n| seamsvn | Minimum security version number of seam module. |\n| enforce_tcb_upto_date | Boolean value to enforce Up-To-Date TCB. |\n| policy_ids | Array of TD/Enclave Attestation Policy Ids. |"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "(Required) Content-Type header"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"description": "(Required) Accept header",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
												"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"attestation_type\": [\n        \"SGX\"\n    ],\n    \"sgx\": {\n        \"attributes\": {\n            \"mrsigner\": [\n                \"83d719e77deaca1470f6baf62a4d774303c899db69020f9c70ee1dfc08c7ce9e\"\n            ],\n            \"isvprodid\": [\n                0\n            ],\n            \"mrenclave\": [\n                \"d767e303208c8a274a395d58a26cd4a14372cf67291d0ab34f6f64255cfc4586\"\n            ],\n            \"isvsvn\": 0,\n            \"client_permissions\": [\n                \"nginx\",\n                \"USA\"\n            ],\n            \"enforce_tcb_upto_date\": false\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{kbs}}:{{kbsPort}}/kbs/v1/key-transfer-policies",
											"protocol": "https",
											"host": [
												"{{kbs}}"
											],
											"port": "{{kbsPort}}",
											"path": [
												"kbs",
												"v1",
												"key-transfer-policies"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 19 Jan 2022 08:45:20 GMT"
										},
										{
											"key": "Content-Length",
											"value": "397"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"17baf0b8-4cb5-4800-84cd-b7c5b0ffa6fe\",\n    \"created_at\": \"2022-01-19T08:45:20.096598576Z\",\n    \"attestation_type\": [\n        \"SGX\"\n    ],\n    \"sgx\": {\n        \"attributes\": {\n            \"mrsigner\": [\n                \"83d719e77deaca1470f6baf62a4d774303c899db69020f9c70ee1dfc08c7ce9e\"\n            ],\n            \"isvprodid\": [\n                0\n            ],\n            \"mrenclave\": [\n                \"d767e303208c8a274a395d58a26cd4a14372cf67291d0ab34f6f64255cfc4586\"\n            ],\n            \"isvsvn\": 0,\n            \"client_permissions\": [\n                \"nginx\",\n                \"USA\"\n            ],\n            \"enforce_tcb_upto_date\": false\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "createKeyUsingKMIPId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "(Required) Content-Type header"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"description": "(Required) Accept header",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key_information\": {\n        \"algorithm\": \"RSA\",\n        \"key_length\": 3072,\n        \"kmip_key_id\": \"{{kmipKeyId}}\"\n    },\n    \"transfer_policy_id\": \"{{keyTransferPolicyId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{kbs}}:{{kbsPort}}/kbs/v1/keys",
									"protocol": "https",
									"host": [
										"{{kbs}}"
									],
									"port": "{{kbsPort}}",
									"path": [
										"kbs",
										"v1",
										"keys"
									]
								},
								"description": "Creates or Registers a key.\n\nThe serialized KeyRequest Go struct object represents the content of the request body.\n\n | Attribute          | Description |\n |--------------------|-------------|\n | key_information    | A json object having all the required information about a key. |\n | transfer_policy_id | Unique identifier of the transfer policy to apply to this key. |\n | label              | String to attach optionally a text description to the key, e.g. \"US Nginx key\". |\n | usage              | String to attach optionally a usage criteria for the key, e.g. \"Country:US,State:CA\". |\n\nThe serialized KeyInformation Go struct object represents the content of the key_information field.\n\n | Attribute   | Description |\n |-------------|-------------|\n | algorithm   | Encryption algorithm used to create or register key. Supported algorithms are AES, RSA and EC. |\n | key_length  | Key length used to create key. Supported key lengths are 128,192,256 bits for AES and 2048,3072,4096,7680 bits for RSA. |\n | curve_type  | Elliptic curve used to create key. Supported curves are secp256r1, secp384r1 and secp521r1. |\n | key_string  | Base64 encoded private key to be registered. Supported only if key is created locally. |\n | kmip_key_id | Unique KMIP identifier of key to be registered. Supported only if key is created on KMIP server. |\n"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "(Required) Content-Type header"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"description": "(Required) Accept header",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
												"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"key_information\": {\n        \"algorithm\": \"RSA\",\n        \"key_length\": 3072,\n        \"kmip_key_id\": \"{{kmipKeyId}}\"\n    },\n    \"transfer_policy_id\": \"{{keyTransferPolicyId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{kbs}}:{{kbsPort}}/kbs/v1/keys",
											"protocol": "https",
											"host": [
												"{{kbs}}"
											],
											"port": "{{kbsPort}}",
											"path": [
												"kbs",
												"v1",
												"keys"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Wed, 19 Jan 2022 08:45:22 GMT"
										},
										{
											"key": "Content-Length",
											"value": "330"
										}
									],
									"cookie": [],
									"body": "{\n    \"key_information\": {\n        \"id\": \"104cc28d-513a-49fe-964d-6a93b6db48cb\",\n        \"algorithm\": \"RSA\",\n        \"key_length\": 3072,\n        \"kmip_key_id\": \"168\"\n    },\n    \"transfer_policy_id\": \"17baf0b8-4cb5-4800-84cd-b7c5b0ffa6fe\",\n    \"transfer_link\": \"https://10.80.207.55:9443/kbs/v1/keys/104cc28d-513a-49fe-964d-6a93b6db48cb/transfer\",\n    \"created_at\": \"2022-01-19T08:45:22.771619774Z\"\n}"
								}
							]
						}
					],
					"description": "Provision KBS with a key, key transfer policy and CSP CMS root-ca:\n\na) Create a key transfer policy with SGX attributes.  \nb) Create a key and associate it with key transfer policy id from above step.  \nTake note of keys transfer_link as it is needed for fetching key in next steps.  \nc) Copy CSP CMS root-ca to KBS trusted-ca directory and restart KBS."
				},
				{
					"name": "Fetch Attestation Token",
					"item": [
						{
							"name": "sgxVerifyQuote",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
										"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"quote\": \"{{sgxQuote}}\"\n}"
								},
								"url": {
									"raw": "https://{{qvs}}:{{qvsPort}}/qvs/v1/quote/sgx/verify",
									"protocol": "https",
									"host": [
										"{{qvs}}"
									],
									"port": "{{qvsPort}}",
									"path": [
										"qvs",
										"v1",
										"quote",
										"sgx",
										"verify"
									]
								},
								"description": "Verifies sgx quote.  \nThe serialized QuoteVerificationRequest Go struct object represents the content of the request body.\n\n| Attribute | Description |\n| --- | --- |\n| quote | Sgx Quote in base64 encoding. |\n\nReturns - The serialized QuoteVerificationResponse Go struct object that was retrieved."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{bearerTokenGlobalAdminUserEnt}}",
												"description": "Enter your bearer token in the format **Bearer &lt;token&gt;**",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"quote\": \"{{sgxQuote}}\"\n}"
										},
										"url": {
											"raw": "https://{{qvs}}:{{qvsPort}}/qvs/v1/quote/sgx/verify",
											"protocol": "https",
											"host": [
												"{{qvs}}"
											],
											"port": "{{qvsPort}}",
											"path": [
												"qvs",
												"v1",
												"quote",
												"sgx",
												"verify"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 04 Feb 2022 08:16:29 GMT"
										},
										{
											"key": "Content-Length",
											"value": "69"
										}
									],
									"cookie": [],
									"body": "{\n    \"collateral_expiration_status\": false,\n    \"quote_verification_result\": 2\n}"
								}
							]
						}
					],
					"description": "Provision TAA with attestation token:\n\nInvoke TAA fetch-token command to request attestation token from APS.\n\n```\ntaa fetch-token -a https://{{aps}}:{{apsPort}}/aps/v1/ -t <bearerTokenCustomClaimsAPS>\n\n```\n\n\nAPS on successful verification of the quote issues a JWT back to the requesting entity, ex: TAA, which can make use of the JWT to request a service like fetch a key from KBS. The service provider verifies that the JWT has indeed been provided and signed by APS and then provides the services as needed. \n```\nA sample decoded JWT has been provided below:\n\n{ \n  \"alg\": \"RS384\", \n  \"kid\": <certificate reference to perform signature verification of attestation token>, \n  \"typ\": \"JWT\" \n}.{ \n  \"exp\": 1568187398, \n  \"iat\": 1568158598, \n  \"iss\": \"APS JWT Issuer\", \n  \"nbf\": 1568158598, \n  \"mrseam\": <Measurement of the SEAM module>, \n  \"mrsignerseam\": <Measurement of the SEAM module issuer>, \n  \"mrtd\": <Measurement of initial contents of TD>, \n  \"rtmr0\": <Runtime measurement for TD from RTMR 0>,\n  \"rtmr1\": <Runtime measurement for TD from RTMR 1>,\n  \"rtmr2\": <Runtime measurement for TD from RTMR 2>,\n  \"rtmr3\": <Runtime measurement for TD from RTMR 3>,\n  \"seamsvn\": <Security Version Number of SEAM module>, \n  \"tcb_status\": <Status of TCB as received from QVS>, \n  \"policy_ids\": <List of policy ids against which TD policy verification was successful>, \n  \"tee\": \"TDX\", \n  \"ver\": \"1.0\" \n}.[Signature]\n```",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Validate Attestation",
					"item": [],
					"description": "Validate key transfer using sgx auth token for KBS.\n\nInvoke TAA `fetch-key` command to request key from KBS.\n\n``` plaintext\ntaa fetch-key -k https://{{kbs}}:{{kbsPort}}/kbs/v1/keys/<keyId>/transfer -m passport -t <bearerTokenCustomClaimsKbs>\n\n```",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "The TEE Attestation Agent (TAA) or SGX Attestation Agent is a sample command line tool to showcase the TEE attestation use cases. It is run either inside a TD or can be integrated inside an application enclave. When used in Passport mode, TAA requests attestation token from APS by presenting APS with desired SGX quote."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}