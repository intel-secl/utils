SHELL:=/bin/bash
VERSION := "v5.0.0"
BUILDDATE := $(shell TZ=UTC date +%Y-%m-%dT%H:%M:%SZ)
PROXY_EXISTS := $(shell if [[ "${https_proxy}" || "${http_proxy}" ]]; then echo 1; else echo 0; fi)
DOCKER_PROXY_FLAGS := ""
ifeq ($(PROXY_EXISTS),1)
        DOCKER_PROXY_FLAGS = --build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy}
else
        undefine DOCKER_PROXY_FLAGS
endif

INTEL_SECL_K8S = authservice cms ihub hvs tagent isecl-k8s-controller isecl-k8s-scheduler admission-controller aas-manager

binaries: clean download-eca intel-secl
	mkdir binaries
	cp intel-secl/deployments/installer/*.bin binaries/
	cp intel-secl/deployments/installer/*.sh binaries/
	cp intel-secl/installer/isecl-k8s-extensions-v*.tar.gz binaries/
	cp -r intel-secl/tools/download-tls-certs.sh binaries/

k8s: k8s_common init-containers
	cp -r intel-secl/deployments/k8s/* k8s/manifests/
	cp -r utils/build/workload-security/k8s/create-dirs-nfs.sh k8s/
	cp -r utils/build/k8s-manifests/db-deployments/multi-node/aas-db k8s/manifests/
	cp -r utils/build/k8s-manifests/db-deployments/multi-node/ws/* k8s/manifests/
	cp -r utils/build/workload-security/k8s/isecl-bootstrap.sh k8s/manifests/isecl-bootstrap.sh
	cp -r utils/build/workload-security/k8s/nats k8s/manifests/nats
	cp -r intel-secl/tools/download-tls-certs.sh k8s/manifests/nats/
	mkdir -p k8s/manifests/aas/scripts
	mv k8s/manifests/aas/populate-users k8s/manifests/aas/scripts/
	mv k8s/manifests/aas/populate-users.env k8s/manifests/aas/scripts/

k8s-aio: k8s_common
	cp -r utils/build/k8s-manifests/db-deployments/single-node/aas-db k8s/manifests/
	cp -r utils/build/k8s-manifests/db-deployments/single-node/ws/* k8s/manifests/
	cp utils/build/workload-security/k8s/pre-requisites.sh k8s/manifests/
	cp -r utils/build/k8s-manifests/single-node/* k8s/manifests/
	cp -r utils/build/workload-security/k8s/isecl-bootstrap.sh k8s/manifests/isecl-bootstrap.sh
	cp -r utils/build/workload-security/k8s/hvs k8s/manifests/
	mkdir -p k8s/manifests/aas/scripts
	cp intel-secl/deployments/k8s/aas/populate-users k8s/manifests/aas/scripts/
	cp intel-secl/deployments/k8s/aas/populate-users.env k8s/manifests/aas/scripts/populate-users.env

k8s_common: clean $(INTEL_SECL_K8S)
	mkdir -p k8s/binaries
	mkdir -p k8s/container-images
	mkdir -p k8s/manifests
	mkdir -p k8s/container-runtime
	cp -r utils/build/workload-security/k8s/pre-requisites.sh k8s/manifests/
	cp -r utils/build/workload-security/k8s/isecl-bootstrap-db-services.sh k8s/manifests/isecl-bootstrap-db-services.sh
	cp utils/build/workload-security/k8s/isecl-k8s.env k8s/manifests/isecl-k8s.env
	cp -r utils/build/k8s-manifests/k8s-extensions-controller k8s/manifests/
	cp -r utils/build/k8s-manifests/k8s-extensions-scheduler k8s/manifests/
	cp -r utils/build/k8s-manifests/k8s-admission-controller k8s/manifests/
	cp -r utils/build/k8s-manifests/k8s-extensions-scheduler/scripts k8s/manifests/k8s-admission-controller/
	cp -r utils/build/workload-security/k8s/ta k8s/manifests/ta
	cp intel-secl/deployments/container-archive/oci/* k8s/container-images/

init-containers:
	cd  utils/tools/containers/ && make all
	cp -r utils/tools/containers/nats/*.tar k8s/container-images/
	cp -r utils/tools/containers/init-wait/*.tar k8s/container-images/

$(INTEL_SECL_K8S):
	cd intel-secl && make $@-k8s

intel-secl:
	cd $@ && make cms-installer && make authservice-installer && make aas-manager && make download-eca && make hvs-installer && make ihub-installer && make tagent-installer && make isecl-k8s-extensions-installer

clean: $(patsubst %, %-clean, $(TARGETS))
	rm -rf binaries/
	rm -rf k8s

download-eca:
	cd intel-secl && make download-eca && cd -

%-clean:
	cd $* && make clean

.PHONY: all clean intel-secl init-containers
