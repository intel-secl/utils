TARGETS = intel-secl workload-service k8s-extensions trust-agent workload-agent
INTEL_SECL_K8S = authservice cms ihub kbs hvs

binaries: clean download-eca $(TARGETS) wpm-with-docker
	mkdir binaries
	cp intel-secl/deployments/installer/*.bin binaries/
	cp intel-secl/deployments/installer/*.sh binaries/
	cp workload-service/out/*.bin binaries/
	cp trust-agent/out/*.bin binaries/
	cp workload-agent/out/*.bin binaries/
	cp k8s-extensions/out/isecl-k8s-extensions-v*.tar.gz binaries/

k8s: k8s_common
	cp -r intel-secl/deployments/k8s/* k8s/manifests/
	cp -r utils/build/workload-security/k8s/create-dirs-nfs.sh k8s/
	cp -r utils/build/k8s-manifests/db-deployments/multi-node/aas-db k8s/manifests/
	cp -r utils/build/k8s-manifests/db-deployments/multi-node/ws/* k8s/manifests/
	cp -r workload-service/out/k8s k8s/manifests/wls
	cp -r utils/build/workload-security/k8s/isecl-bootstrap.sh k8s/manifests/isecl-bootstrap.sh
	mkdir -p k8s/manifests/aas/scripts
	mv k8s/manifests/aas/populate-users k8s/manifests/aas/scripts/
	mv k8s/manifests/aas/populate-users.env k8s/manifests/aas/scripts/
	cp workload-service/out/*.tar k8s/container-images/

k8s-aio: k8s_common
	cp -r utils/build/k8s-manifests/db-deployments/single-node/aas-db k8s/manifests/
	cp -r utils/build/k8s-manifests/db-deployments/single-node/ws/* k8s/manifests/
	cp utils/build/workload-security/k8s/pre-requisites.sh k8s/manifests/
	cp -r utils/build/k8s-manifests/single-node/* k8s/manifests/
	cp -r utils/build/workload-security/k8s/isecl-bootstrap.sh k8s/manifests/isecl-bootstrap.sh
	cp -r utils/build/workload-security/k8s/hvs k8s/manifests/
	cp -r utils/build/workload-security/k8s/wls k8s/manifests/
	mkdir -p k8s/manifests/aas/scripts
	cp intel-secl/deployments/k8s/aas/populate-users k8s/manifests/aas/scripts/
	cp intel-secl/deployments/k8s/aas/populate-users.env k8s/manifests/aas/scripts/populate-users.env

k8s_common: clean $(INTEL_SECL_K8S) wls_k8s k8s-extensions tagent_k8s wlagent_k8s secure_docker_daemon secure_docker_plugin wpm-with-docker
	mkdir -p k8s/binaries
	mkdir -p k8s/container-images
	mkdir -p k8s/manifests
	mkdir -p k8s/container-runtime
	mkdir -p k8s/platform-dependencies
	cp -r utils/build/workload-security/k8s/pre-requisites.sh k8s/manifests/
	cp -r utils/build/workload-security/k8s/isecl-bootstrap-db-services.sh k8s/manifests/isecl-bootstrap-db-services.sh
	cp utils/build/workload-security/k8s/isecl-k8s.env k8s/manifests/isecl-k8s.env
	cp -r utils/build/k8s-manifests/k8s-extensions-controller k8s/manifests/
	cp -r utils/build/k8s-manifests/k8s-extensions-scheduler k8s/manifests/
	cp -r trust-agent/out/k8s k8s/manifests/ta
	cp -r workload-agent/out/k8s k8s/manifests/wla
	cp intel-secl/deployments/installer/wpm-v*.bin k8s/binaries/
	cp k8s-extensions/out/isecl-k8s-extensions/*.tar k8s/container-images/
	cp intel-secl/deployments/container-archive/oci/* k8s/container-images/
	cp workload-agent/out/*.tar k8s/container-images/
	cp trust-agent/out/*.tar k8s/container-images/
	cp -r utils/build/workload-security/k8s/secure-docker-daemon/* k8s/container-runtime/
	cp -r secure-docker-daemon/out/* k8s/container-runtime/
	cp utils/build/workload-security/k8s/install-prereqs-docker.sh k8s/container-runtime/
	cp utils/build/workload-security/k8s/secure-docker-plugin.env k8s/container-runtime/
	cp -r secure-docker-plugin/secure-docker-plugin k8s/container-runtime/
	cp -r secure-docker-plugin/artifact k8s/container-runtime/artifact
	cp workload-service/out/*.tar k8s/container-images/
	cp utils/build/workload-security/k8s/install-ta-prereqs.sh k8s/platform-dependencies/


tagent_k8s:
	cd trust-agent && make k8s

wlagent_k8s:
	cd workload-agent && make k8s

$(INTEL_SECL_K8S):
	cd intel-secl && make $@-k8s

k8s-extensions:
	cd k8s-extensions && make

wls_k8s:
	cd workload-service && make k8s

secure_docker_daemon:
	cd secure-docker-daemon && make installer

secure_docker_plugin:
	cd secure-docker-plugin && make

clean: $(patsubst %, %-clean, $(TARGETS))
	rm -rf binaries/
	cd secure-docker-daemon && make clean
	cd secure-docker-plugin && make clean

download-eca:
	cd intel-secl && make download-eca && cd -

$(TARGETS):
	cd $@ && make installer

wpm-with-docker: 
	cd intel-secl && make wpm-docker-installer

%-clean:
	cd $* && make clean

.PHONY: all clean $(TARGETS) wpm-with-docker
